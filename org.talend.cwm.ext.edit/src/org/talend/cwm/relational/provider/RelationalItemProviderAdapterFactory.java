/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.talend.cwm.relational.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.talend.cwm.relational.util.RelationalAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class RelationalItemProviderAdapterFactory extends RelationalAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public RelationalItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link org.talend.cwm.relational.TdTable} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected TdTableItemProvider tdTableItemProvider;

    /**
     * This creates an adapter for a {@link org.talend.cwm.relational.TdTable}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createTdTableAdapter() {
        if (tdTableItemProvider == null) {
            tdTableItemProvider = new TdTableItemProvider(this);
        }

        return tdTableItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.talend.cwm.relational.TdView} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected TdViewItemProvider tdViewItemProvider;

    /**
     * This creates an adapter for a {@link org.talend.cwm.relational.TdView}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createTdViewAdapter() {
        if (tdViewItemProvider == null) {
            tdViewItemProvider = new TdViewItemProvider(this);
        }

        return tdViewItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.talend.cwm.relational.TdCatalog} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected TdCatalogItemProvider tdCatalogItemProvider;

    /**
     * This creates an adapter for a {@link org.talend.cwm.relational.TdCatalog}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createTdCatalogAdapter() {
        if (tdCatalogItemProvider == null) {
            tdCatalogItemProvider = new TdCatalogItemProvider(this);
        }

        return tdCatalogItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.talend.cwm.relational.TdSchema} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected TdSchemaItemProvider tdSchemaItemProvider;

    /**
     * This creates an adapter for a {@link org.talend.cwm.relational.TdSchema}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createTdSchemaAdapter() {
        if (tdSchemaItemProvider == null) {
            tdSchemaItemProvider = new TdSchemaItemProvider(this);
        }

        return tdSchemaItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.talend.cwm.relational.TdColumn} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected TdColumnItemProvider tdColumnItemProvider;

    /**
     * This creates an adapter for a {@link org.talend.cwm.relational.TdColumn}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createTdColumnAdapter() {
        if (tdColumnItemProvider == null) {
            tdColumnItemProvider = new TdColumnItemProvider(this);
        }

        return tdColumnItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.talend.cwm.relational.TdSqlDataType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected TdSqlDataTypeItemProvider tdSqlDataTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.talend.cwm.relational.TdSqlDataType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createTdSqlDataTypeAdapter() {
        if (tdSqlDataTypeItemProvider == null) {
            tdSqlDataTypeItemProvider = new TdSqlDataTypeItemProvider(this);
        }

        return tdSqlDataTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.talend.cwm.relational.TdTrigger} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected TdTriggerItemProvider tdTriggerItemProvider;

    /**
     * This creates an adapter for a {@link org.talend.cwm.relational.TdTrigger}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createTdTriggerAdapter() {
        if (tdTriggerItemProvider == null) {
            tdTriggerItemProvider = new TdTriggerItemProvider(this);
        }

        return tdTriggerItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.talend.cwm.relational.TdProcedure} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected TdProcedureItemProvider tdProcedureItemProvider;

    /**
     * This creates an adapter for a {@link org.talend.cwm.relational.TdProcedure}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createTdProcedureAdapter() {
        if (tdProcedureItemProvider == null) {
            tdProcedureItemProvider = new TdProcedureItemProvider(this);
        }

        return tdProcedureItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void dispose() {
        if (tdTableItemProvider != null) tdTableItemProvider.dispose();
        if (tdViewItemProvider != null) tdViewItemProvider.dispose();
        if (tdCatalogItemProvider != null) tdCatalogItemProvider.dispose();
        if (tdSchemaItemProvider != null) tdSchemaItemProvider.dispose();
        if (tdColumnItemProvider != null) tdColumnItemProvider.dispose();
        if (tdSqlDataTypeItemProvider != null) tdSqlDataTypeItemProvider.dispose();
        if (tdTriggerItemProvider != null) tdTriggerItemProvider.dispose();
        if (tdProcedureItemProvider != null) tdProcedureItemProvider.dispose();
    }

}

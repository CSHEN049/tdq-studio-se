<?xml version="1.0" encoding="UTF-8" ?>
<!-- <!DOCTYPE XMI SYSTEM 'Model1311.dtd'> -->
<XMI xmi.version='1.1' xmlns:Model='omg.org/mof.Model/1.3'>
  <XMI.header>
    <XMI.model xmi.name='CWMMIP' xmi.version='1.3'/>
    <XMI.metamodel xmi.name='org.omg.mof.Model' xmi.version='1.3'/>
  </XMI.header>
<XMI.content>
<!-- ==================== CWMMIP    [Package] ==================== -->
<Model:Package xmi.id = 'a3DB46376007B' 
  name = 'CWMMIP' annotation = '' 
  isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' >
  <Model:Namespace.contents>
    <!-- ==================== CWMMIP.org.omg.mof.idl_prefix=org.omg.cwmmip    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.1195' 
      name = 'org.omg.mof.idl_prefix=org.omg.cwmmip' annotation = '' 
      tagId = 'org.omg.mof.idl_prefix' 
      elements = 'a3DB46376007B' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>org.omg.cwmmip</XMI.any>
      </Model:Tag.values>
    </Model:Tag>
    <!-- ==================== CWMMIP.org.omg.xmi.namespace=CWMMIP    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.1196' 
      name = 'org.omg.xmi.namespace=CWMMIP' annotation = '' 
      tagId = 'org.omg.xmi.namespace' 
      elements = 'a3DB46376007B' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>CWMMIP</XMI.any>
      </Model:Tag.values>
    </Model:Tag>
    <Model:Import xmi.id = 'G.1197' 
      name = 'Core' annotation = '' 
      visibility = 'public_vis' isClustered = 'true' 
      importedNamespace = 'a3A6600C5031F' >
    </Model:Import>
    <Model:Import xmi.id = 'G.1198' 
      name = 'Model' annotation = '' 
      visibility = 'public_vis' isClustered = 'true' 
      importedNamespace = 'a3FBA74B40343' >
    </Model:Import>
    <!-- ==================== CWMMIP.UnitOfInterchange    [Class] ==================== -->
    <Model:Class xmi.id = 'a3DB463B40265' 
      name = 'UnitOfInterchange' annotation = 'UnitOfInterchange is a subclass of CWM Namespace that contains the complete CWM instance (model/metadata) being interchanged.' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' 
      supertypes = 'a32B69F3A0118' >
      <Model:Namespace.contents>
        <!-- ==================== CWMMIP.UnitOfInterchange.interchangePattern    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a3DB6F45601B9' 
          name = 'interchangePattern' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          type = 'a3DB6F2AF0262' 
          referencedEnd = 'a3DB6F3BB0289' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Reference>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== CWMMIP.com.urep.jcr.transient=true    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.1199' 
      name = 'com.urep.jcr.transient=true' annotation = '' 
      tagId = 'com.urep.jcr.transient' 
      elements = 'a3DB463B40265 a3DB6F2AF0262 a3DB6F573008C a3DB6FE9D001B a3DB6FEFB0070 a3DB7056E016B a3DB7092E01DE a3DB733D2025D a3DB73A800173 a3DBAEBE80299 a3DBAEBF00114' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>true</XMI.any>
      </Model:Tag.values>
    </Model:Tag>
    <!-- ==================== CWMMIP.InterchangePattern    [Class] ==================== -->
    <Model:Class xmi.id = 'a3DB6F2AF0262' 
      name = 'InterchangePattern' annotation = 'InterchangePattern formally describes a CWM Metadata Interchange pattern. Such a pattern may describe the content of one or more instances of UnitOfInterchange referenced by InterchangePattern.' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' 
      supertypes = 'a327A5C330208' >
      <Model:Namespace.contents>
        <!-- ==================== CWMMIP.InterchangePattern.name    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a3DB6F30902BC' 
          name = 'name' annotation = 'The name of the interchange pattern.' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a33DD702401B8' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
        <!-- ==================== CWMMIP.InterchangePattern.version    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a3DB6F3130356' 
          name = 'version' annotation = 'The version of the interchange pattern.' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a33DD702401B8' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
        <!-- ==================== CWMMIP.InterchangePattern.uri    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a3DB6F33F0309' 
          name = 'uri' annotation = 'A URI identifying a human-readable pattern specfication document that describes the interchange pattern.' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a33DD702401B8' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
        <!-- ==================== CWMMIP.InterchangePattern.classification    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a3DB6F37B025E' 
          name = 'classification' annotation = 'Identifies the structural classification of the pattern: Micro Pattern, Domain Pattern, Macro Pattern.' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a33DD702401B8' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
        <!-- ==================== CWMMIP.InterchangePattern.category    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a3DB6F3810072' 
          name = 'category' annotation = 'Identifies the usage category of the pattern: Mapping, Typing, Extension, Interpretation, Generation, Structural.' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a33DD702401B8' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
        <!-- ==================== CWMMIP.InterchangePattern.projection    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a3DB703BB03CF' 
          name = 'projection' annotation = 'An object-valued array of type Projection that describes the metamodel graph subset defining the semantic context of the pattern. If this attribute contains more than one value, then the complete projection of the pattern is the graph union of multiple projection object values. This attribute has a multiplicity of 1..*.' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a3DB6FE9D001B' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '-1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
        <!-- ==================== CWMMIP.InterchangePattern.componentPattern    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a3DB6FA560344' 
          name = 'componentPattern' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          type = 'a3DB6F2AF0262' 
          referencedEnd = 'a3DB6F9B200C7' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:StructuralFeature.multiplicity>
        </Model:Reference>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== CWMMIP.ModeledSemanticContext    [Class] ==================== -->
    <Model:Class xmi.id = 'a3DB6F573008C' 
      name = 'ModeledSemanticContext' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' 
      supertypes = 'a3DB6FEFB0070' >
      <Model:ModelElement.annotation>ModeledSemanticContext is a subclass of SemanticContext that adds references to instances of MOF ModelElements and MOF Associations, as well as an association to MOF ModelElements as a means of specifying anchor classes. Constraints may be specified within ModelSemanticContext via the inherited SemanticContext::constraint attribute.&#x000d;&#x000a;&#x000d;&#x000a;Note that this class generally supports the construction of "explicitly modeled" pattern definitions; that is, pattern definitions composed of MOF metaclass instances (or MOF metaobjects), rather than simply logical class names.</Model:ModelElement.annotation>
      <Model:Namespace.contents>
        <!-- ==================== CWMMIP.ModeledSemanticContext.mofElement    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a3DB6FCD101C5' 
          name = 'mofElement' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          type = 'a3DB73D1D03C7' 
          referencedEnd = 'a3DB73D9F02DE' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:StructuralFeature.multiplicity>
        </Model:Reference>
        <!-- ==================== CWMMIP.ModeledSemanticContext.mofAssociation    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a3DB6FCD702E6' 
          name = 'mofAssociation' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          type = 'a3DB6F54502A3' 
          referencedEnd = 'a3DB6FC1503BA' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:StructuralFeature.multiplicity>
        </Model:Reference>
        <!-- ==================== CWMMIP.ModeledSemanticContext.mofAnchorElement    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a3DBB10D10213' 
          name = 'mofAnchorElement' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          type = 'a3DB73D1D03C7' 
          referencedEnd = 'a3DBB10430106' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:StructuralFeature.multiplicity>
        </Model:Reference>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== CWMMIP.Projection    [Class] ==================== -->
    <Model:Class xmi.id = 'a3DB6FE9D001B' 
      name = 'Projection' annotation = 'Projection is an abstract base class that models the semantic context of the pattern, where by semantic context we mean a well-defined subset of the CWM metamodel graph.' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
      isSingleton = 'false' 
      supertypes = 'a327A5C330208' >
    </Model:Class>
    <!-- ==================== CWMMIP.SemanticContext    [Class] ==================== -->
    <Model:Class xmi.id = 'a3DB6FEFB0070' 
      name = 'SemanticContext' annotation = 'SemaniticContext is a concrete subclass of Projection that specifies a projection by naming the CWM model elements and associations comprising the projection, along with any constraints on those elements.' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' 
      supertypes = 'a3DB6FE9D001B' >
      <Model:Namespace.contents>
        <!-- ==================== CWMMIP.SemanticContext.element    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a3DB6FF8F0087' 
          name = 'element' annotation = 'Element contains the names of the CWM metamodel classes comprising the Projection, expressed as string-based, logical names. This attribute has a multiplicity of 0..*. These logical names may refer to elements from multiple CWM metamodel packages.' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a33DD702401B8' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
        <!-- ==================== CWMMIP.SemanticContext.association    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a3DB6FF950022' 
          name = 'association' annotation = 'Association contains the names of CWM associations comprising the Projection, expressed as string-based logical names. This attribute has a multiplicity of 0..*. These logical names may refer to associations from any number of CWM packages, including associations that span packages.' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a33DD702401B8' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
        <!-- ==================== CWMMIP.SemanticContext.constraint    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a3DB737FF02B2' 
          name = 'constraint' annotation = 'Constraint is a collection of pattern constraints that apply to elements and associations comprising the Projection. This attribute has a multiplicity of 0..*.' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a3DB733D2025D' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
        <!-- ==================== CWMMIP.SemanticContext.anchorElement    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a3DB80FDD02CC' 
          name = 'anchorElement' annotation = 'AnchorElement names CWM metamodel elements from the Projection that have some distinguished meaning. Generally, these elements are thought of as root objects of the metamodel Projection graph and are used as starting points for navigating the graph. This attribute has a multiplicity of 0..*. Although a Projection may have multiple anchor points, in practice, most Projections will usually have a single anchor point.' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a33DD702401B8' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== CWMMIP.element    [Class] ==================== -->
    <Model:Class xmi.id = 'a3DB7056E016B' 
      name = 'element' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' >
    </Model:Class>
    <!-- ==================== CWMMIP.GraphSubset    [Class] ==================== -->
    <Model:Class xmi.id = 'a3DB7092E01DE' 
      name = 'GraphSubset' annotation = 'GraphSubset is a concrete subclass of Projection that allows a projection to be specified by an expression which, when evaluated, describes some physical sub-graph of the CWM UML model.' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' 
      supertypes = 'a3DB6FE9D001B' >
      <Model:Namespace.contents>
        <!-- ==================== CWMMIP.GraphSubset.element    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a3DB70C4001EB' 
          name = 'element' annotation = 'Element is the logical name of a CWM metamodel element (usually a package or class) comprising the physical projection.' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a33DD702401B8' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
        <!-- ==================== CWMMIP.GraphSubset.deepCopy    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a3DB7094801B3' 
          name = 'deepCopy' annotation = 'DeepCopy is a Boolean attribute which, when true, implies that all connected elements and their attributes, within the boundaries of the specified package, are to be included in the pattern projection.' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a33DD6F650276' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
        <!-- ==================== CWMMIP.GraphSubset.copyDepth    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a3DB709C90078' 
          name = 'copyDepth' annotation = 'CopyDepth is an integer value that specifies the number of graph edges to traverse when establishing the physical graph projection, in cases when deepCopy is false.' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a33DD6FD7021C' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
        <!-- ==================== CWMMIP.GraphSubset.aggregationsOnly    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a3DB709DD0398' 
          name = 'aggregationsOnly' annotation = 'AggregationsOnly is a Boolean attribute which, when true, specifies that only composite elements and their components are to be included in the physical graph projection.' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a33DD6F650276' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
        <!-- ==================== CWMMIP.GraphSubset.includeAssociations    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a3DB709F20294' 
          name = 'includeAssociations' annotation = 'IncludeAssociations is a Boolean attribute which, when true, specifies that associations are to be included in the physical graph projection.' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a33DD6F650276' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== CWMMIP.PatternConstraint    [Class] ==================== -->
    <Model:Class xmi.id = 'a3DB733D2025D' 
      name = 'PatternConstraint' annotation = 'PatternConstraint is used to define constraints against the metamodel Projection. There is no requirement to use any particular constraint language. However, if OCL is used, the OCL expression contained by PatternConstraint::body must be a valid OCL expression relative to the modeling context of the Projection.' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' 
      supertypes = 'a327A5C330208' >
      <Model:Namespace.contents>
        <!-- ==================== CWMMIP.PatternConstraint.body    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a3DB733E503D7' 
          name = 'body' annotation = 'Constraint expressed as a textual string in some constraint language.' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a33DD702401B8' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
        <!-- ==================== CWMMIP.PatternConstraint.language    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a3EB7E6A102C9' 
          name = 'language' annotation = 'Specfies the names of the constraint language used.' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a33DD702401B8' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== CWMMIP.ModeledGraphSubset    [Class] ==================== -->
    <Model:Class xmi.id = 'a3DB73A800173' 
      name = 'ModeledGraphSubset' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' 
      supertypes = 'a3DB7092E01DE' >
      <Model:ModelElement.annotation>ModeledGraphSubset is a subclass of GraphSubset that adds a reference to a single instance of MOF ModelElement.&#x000d;&#x000a;&#x000d;&#x000a;Note that this class generally supports the construction of "explicitly modeled" pattern definitions; that is, pattern definitions composed of MOF metaclass instances (or MOF metaobjects), rather than simply logical class names.</Model:ModelElement.annotation>
      <Model:Namespace.contents>
        <!-- ==================== CWMMIP.ModeledGraphSubset.mofElement    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a3DB73AA90303' 
          name = 'mofElement' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          type = 'a3DB73D1D03C7' 
          referencedEnd = 'a3DB73C4C0206' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Reference>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== CWMMIP.Restriction    [Class] ==================== -->
    <Model:Class xmi.id = 'a3DBAEBE80299' 
      name = 'Restriction' annotation = 'Restriction is a subclass of PatternConstraint that imposes structural constraints on an instance of a Projection. The resulting structure is then regarded as being invariant with regard to other values that might be supplied in the construction of the pattern instance (e.g., values of certain class attributes).' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' 
      supertypes = 'a3DB733D2025D' >
    </Model:Class>
    <!-- ==================== CWMMIP.BindingParameter    [Class] ==================== -->
    <Model:Class xmi.id = 'a3DBAEBF00114' 
      name = 'BindingParameter' annotation = 'BindingParameter is a subclass of PatternConstraint that typically asserts values (or value ranges) for class attributes. BindingParameters do not influence structure, but influence content instead.' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' 
      supertypes = 'a3DB733D2025D' >
    </Model:Class>
    <!-- ==================== CWMMIP.UnitOfInterchangeReferencesInterchangePattern    [Association] ==================== -->
    <Model:Association xmi.id = 'a3DB6F3BB00B2' 
      name = 'UnitOfInterchangeReferencesInterchangePattern' annotation = 'An instance of UnitOfInterchange may reference an InterchangePattern. An InterchangePattern may reference one or more instances of UnitOfInterchange.' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
      isDerived = 'false' >
      <Model:Namespace.contents>
        <Model:AssociationEnd xmi.id = 'a3DB6F3BB0289' 
          name = 'interchangePattern' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' 
          type = 'a3DB6F2AF0262' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
        <Model:AssociationEnd xmi.id = 'a3DB6F3BB029D' 
          name = 'unitOfInterchange' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' 
          type = 'a3DB463B40265' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
      </Model:Namespace.contents>
    </Model:Association>
    <!-- ==================== CWMMIP.CompositePatternReferencesComponentPattern    [Association] ==================== -->
    <Model:Association xmi.id = 'a3DB6F9AF0362' 
      name = 'CompositePatternReferencesComponentPattern' annotation = 'This is a reflexive association that models pattern composition, in which patterns are comprised from other pattern definitions.' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
      isDerived = 'false' >
      <Model:Namespace.contents>
        <Model:AssociationEnd xmi.id = 'a3DB6F9B200C7' 
          name = 'componentPattern' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' 
          type = 'a3DB6F2AF0262' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
        <Model:AssociationEnd xmi.id = 'a3DB6F9B200F0' 
          name = 'compositePattern' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' 
          type = 'a3DB6F2AF0262' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
      </Model:Namespace.contents>
    </Model:Association>
    <!-- ==================== CWMMIP.ModeledSemanticContextReferencesMOFAssociation    [Association] ==================== -->
    <Model:Association xmi.id = 'a3DB6FC150229' 
      name = 'ModeledSemanticContextReferencesMOFAssociation' annotation = 'This association identifies those MOF Associations defining the semantic context of a Projection.' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
      isDerived = 'false' >
      <Model:Namespace.contents>
        <Model:AssociationEnd xmi.id = 'a3DB6FC1503BA' 
          name = 'mofAssociation' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' 
          type = 'a3DB6F54502A3' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
        <Model:AssociationEnd xmi.id = 'a3DB6FC1503D8' 
          name = 'modeledProjection' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' 
          type = 'a3DB6F573008C' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
      </Model:Namespace.contents>
    </Model:Association>
    <!-- ==================== CWMMIP.ModeledGraphSubsetReferenceMOFPackage    [Association] ==================== -->
    <Model:Association xmi.id = 'a3DB73C4C0204' 
      name = 'ModeledGraphSubsetReferenceMOFPackage' annotation = 'This association identifies those MOF ModelElements defining the graphical subset of a Projection.' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
      isDerived = 'false' >
      <Model:Namespace.contents>
        <Model:AssociationEnd xmi.id = 'a3DB73C4C0205' 
          name = 'modeledGraphSubset' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' 
          type = 'a3DB73A800173' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
        <Model:AssociationEnd xmi.id = 'a3DB73C4C0206' 
          name = 'mofElement' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' 
          type = 'a3DB73D1D03C7' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
      </Model:Namespace.contents>
    </Model:Association>
    <!-- ==================== CWMMIP.ModeledSemanticContextReferencesMOFModelElement    [Association] ==================== -->
    <Model:Association xmi.id = 'a3DB73D9F002B' 
      name = 'ModeledSemanticContextReferencesMOFModelElement' annotation = 'This association identifies those MOF ModelElements defining the semantic context of a Projection.' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
      isDerived = 'false' >
      <Model:Namespace.contents>
        <Model:AssociationEnd xmi.id = 'a3DB73D9F02DE' 
          name = 'mofElement' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' 
          type = 'a3DB73D1D03C7' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
        <Model:AssociationEnd xmi.id = 'a3DB73D9F02FC' 
          name = 'modeledProjection' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' 
          type = 'a3DB6F573008C' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
      </Model:Namespace.contents>
    </Model:Association>
    <!-- ==================== CWMMIP.ModeledSemanticContextReferencesAnchorElement    [Association] ==================== -->
    <Model:Association xmi.id = 'a3DBB10410320' 
      name = 'ModeledSemanticContextReferencesAnchorElement' annotation = 'This association is used to identify one or more explicitly modeled anchor elements.' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
      isDerived = 'false' >
      <Model:Namespace.contents>
        <Model:AssociationEnd xmi.id = 'a3DBB10430106' 
          name = 'mofAnchorElement' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' 
          type = 'a3DB73D1D03C7' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
        <Model:AssociationEnd xmi.id = 'a3DBB10430124' 
          name = 'modeledSemanticContext' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' 
          type = 'a3DB6F573008C' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
      </Model:Namespace.contents>
    </Model:Association>
  </Model:Namespace.contents>
</Model:Package>
<!-- ==================== Core    [Package] ==================== -->
<Model:Package xmi.id = 'a3A6600C5031F' 
  name = 'Core' 
  isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' >
  <Model:ModelElement.annotation>The Core metamodel depends on no other packages.&#x000d;&#x000a;&#x000d;&#x000a;The ObjectModel Core metamodel contains basic metamodel classes and associations used by all other CWM metamodel packages, including other ObjectModel packages&#x000d;&#x000a;&#x000d;&#x000a;OCL Representation of Core Constraints&#x000d;&#x000a;&#x000d;&#x000a;Operations&#x000d;&#x000a;&#x000d;&#x000a;The operation allFeatures results in a Set containing all Features of the Classifier itself and all its inherited Features.&#x000d;&#x000a;   allFeatures : Set(Feature);&#x000d;&#x000a;   allFeatures = self.feature-&gt;union(self.parent.oclAsType(Classifier).allFeatures)&#x000d;&#x000a;&#x000d;&#x000a;The operation allAttributes results in a Set containing all Attributes of the Classifier itself and all its inherited Attributes.&#x000d;&#x000a;   allAttributes : set(Attribute);&#x000d;&#x000a;   allAttributes = self.allFeatures-&gt;select(f | f.oclIsKindOf(Attribute))&#x000d;&#x000a;&#x000d;&#x000a;The operation specification yields the set of Classifiers that the current Classifier realizes.&#x000d;&#x000a;   specification: Set(Classifier)&#x000d;&#x000a;   specification = self.clientDependency-&gt;&#x000d;&#x000a;   select(d | d.stereotype.name = "realization"&#x000d;&#x000a;      and d.supplier.oclIsKindOf(Classifier)).supplier.oclAsType(Classifier)&#x000d;&#x000a;&#x000d;&#x000a;The operation parent returns a Set containing all direct parents of a Classifier.&#x000d;&#x000a;   parent : Set(Classifier);&#x000d;&#x000a;   parent = self.generalization.parent&#x000d;&#x000a;&#x000d;&#x000a;The operation allParents returns a Set containing all the Classifiers inherited by this Classifier (the transitive closure), excluding the Classifier itself.&#x000d;&#x000a;   allParents : Set(Classifier);&#x000d;&#x000a;   allParents = self.parent-&gt;union(self.parent.allParents)&#x000d;&#x000a;&#x000d;&#x000a;The operation allContents returns a Set containing all ModelElements contained in the Classifier together with the contents inherited from its parents.&#x000d;&#x000a;   allContents : Set(ModelElement);&#x000d;&#x000a;   allContents = self.contents-&gt;union(self.parent.allContents-&gt;&#x000d;&#x000a;   select(e | e.elementOwnership.visibility = #public or &#x000d;&#x000a;      e.elementOwnership.visibility = #protected))&#x000d;&#x000a;&#x000d;&#x000a;The operation supplier results in a Set containing all direct suppliers of the ModelElement.&#x000d;&#x000a;   supplier : Set(ModelElement);&#x000d;&#x000a;   supplier = self.clientDependency.supplier&#x000d;&#x000a;&#x000d;&#x000a;The operation allSuppliers results in a Set containing all the ModelElements that are suppliers of this ModelElement, including the suppliers of these Model Elements. This is the transitive closure.&#x000d;&#x000a;   allSuppliers : Set(ModelElement);&#x000d;&#x000a;   allSuppliers = self.supplier-&gt;union(self.supplier.allSuppliers)&#x000d;&#x000a;&#x000d;&#x000a;The operation contents results in a Set containing all ModelElements contained by the Namespace.&#x000d;&#x000a;   contents : Set(ModelElement)&#x000d;&#x000a;   contents = self.ownedElement -&gt; union(self.namespace.contents)&#x000d;&#x000a;&#x000d;&#x000a;The operation allContents results in a Set containing all ModelElements contained by the Namespace.&#x000d;&#x000a;   allContents : Set(ModelElement);&#x000d;&#x000a;   allContents = self.contents&#x000d;&#x000a;&#x000d;&#x000a;The operation allVisibleElements results in a Set containing all ModelElements visible outside of the Namespace.&#x000d;&#x000a;   allVisibleElements : Set(ModelElement)&#x000d;&#x000a;   allVisibleElements = self.allContents -&gt; select(e |&#x000d;&#x000a;      e.elementOwnership.visibility = #public)&#x000d;&#x000a;&#x000d;&#x000a;The operation allSurroundingNamespaces results in a Set containing all surrounding Namespaces.&#x000d;&#x000a;   allSurroundingNamespaces : Set(Namespace)&#x000d;&#x000a;   allSurroundingNamespaces =&#x000d;&#x000a;      self.namespace-&gt;union(self.namespace.allSurroundingNamespaces)&#x000d;&#x000a;&#x000d;&#x000a;The operation contents results in a Set containing the ModelElements owned by or imported by the Package.&#x000d;&#x000a;   contents : Set(ModelElement)&#x000d;&#x000a;   contents = self.ownedElement-&gt;union(self.importedElement)&#x000d;&#x000a;&#x000d;&#x000a;The operation allImportedElements results in a Set containing the ModelElements imported by the Package.&#x000d;&#x000a;   allImportedElements : Set(ModelElement)&#x000d;&#x000a;   allImportedElements = self.importedElement&#x000d;&#x000a;&#x000d;&#x000a;The operation allContents results in a Set containing the ModelElements owned by or imported by the Package.&#x000d;&#x000a;   allContents : Set(ModelElement)&#x000d;&#x000a;   allContents = self.contents&#x000d;&#x000a;&#x000d;&#x000a;Constraints&#x000d;&#x000a;&#x000d;&#x000a;[C-3-1] A Constraint cannot be applied to itself.&#x000d;&#x000a;context Constraint inv:&#x000d;&#x000a;not self.constrainedElement-&gt;includes (self)&#x000d;&#x000a;&#x000d;&#x000a;[C-3-2] A DataType cannot contain any other ModelElements.&#x000d;&#x000a;context DataType inv:&#x000d;&#x000a;self.ownedElement-&gt;isEmpty&#x000d;&#x000a;&#x000d;&#x000a;[C-3-3] Tags associated with a model element (directly via a property list or indirectly via a stereotype) must not clash with any meta attributes associated with the model element.&#x000d;&#x000a;context ModelElement inv:&#x000d;&#x000a;-- cannot be specified with OCL</Model:ModelElement.annotation>
  <Model:Namespace.contents>
    <!-- ==================== Core.org.omg.mof.idl_prefix=org.omg.cwm.objectmodel    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.958' 
      name = 'org.omg.mof.idl_prefix=org.omg.cwm.objectmodel' annotation = '' 
      tagId = 'org.omg.mof.idl_prefix' 
      elements = 'a3A6600C5031F' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>org.omg.cwm.objectmodel</XMI.any>
      </Model:Tag.values>
    </Model:Tag>
    <!-- ==================== Core.org.omg.xmi.namespace=CWM    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.959' 
      name = 'org.omg.xmi.namespace=CWM' annotation = '' 
      tagId = 'org.omg.xmi.namespace' 
      elements = 'a3A6600C5031F' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>CWM</XMI.any>
      </Model:Tag.values>
    </Model:Tag>
    <!-- ==================== Core.Element    [Class] ==================== -->
    <Model:Class xmi.id = 'a327A5C330208' 
      name = 'Element' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
      isSingleton = 'false' >
      <Model:ModelElement.annotation>An element is an atomic constituent of a model. In the metamodel, an Element is the top metaclass in the metaclass hierarchy. Element is an abstract metaclass.&#x000d;&#x000a;</Model:ModelElement.annotation>
    </Model:Class>
    <!-- ==================== Core.com.urep.jcr.transient=true    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.960' 
      name = 'com.urep.jcr.transient=true' annotation = '' 
      tagId = 'com.urep.jcr.transient' 
      elements = 'a327A5C330208 a327A5C7301CC a32B69F3A0118 a32989FB2023D a3298A02900FE a3298A036025B a327A5D19033E a33CD6DE5030C a327A5D1E0032 a32989F9700FE a3298F1A403BF a3A6F62780143 a327A649B000A a327A646F00E6 a33CFA00203A2 a33CFA9DA01D6 a363559050190 a33DD6FC5001E a33E93BD00075
a3A24417902EF a337A4EF7002C a37AB1FF90221 a33DD6F650276 a384FE9DE02A2 a33DD6FD7021C a33DD6FCF03C0 a33DD702401B8 a3A09E1C0001E a3635582D03D4 a33DD6F820208 a36619BC301D6 a33DD7020032A a3A705EFD0201' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>true</XMI.any>
      </Model:Tag.values>
    </Model:Tag>
    <!-- ==================== Core.ModelElement    [Class] ==================== -->
    <Model:Class xmi.id = 'a327A5C7301CC' 
      name = 'ModelElement' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
      isSingleton = 'false' 
      supertypes = 'a327A5C330208' >
      <Model:ModelElement.annotation>A model element is an element that is an abstraction drawn from the system being modeled.&#x000d;&#x000a;&#x000d;&#x000a;In the metamodel, a ModelElement is a named entity in a Model. It is the base for all modeling metaclasses in the CWM. All other modeling metaclasses are either direct or indirect subclasses of ModelElement.</Model:ModelElement.annotation>
      <Model:Namespace.contents>
        <!-- ==================== Core.ModelElement.name    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a335D4BA70064' 
          name = 'name' annotation = 'An identifier for the ModelElement within its containing Namespace.' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a33DD6FCF03C0' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
        <!-- ==================== Core.ModelElement.visibility    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a3717C111037E' 
          name = 'visibility' annotation = 'Specifies extent of the visibility of the ModelElement within its owning Namespace.' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a3A705EFD0201' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
        <!-- ==================== Core.ModelElement.clientDependency    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a3A6722070063' 
          name = 'clientDependency' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          type = 'a327A646F00E6' 
          referencedEnd = 'a33FFE57B03B3' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:StructuralFeature.multiplicity>
        </Model:Reference>
        <!-- ==================== Core.ModelElement.constraint    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a3A6722040380' 
          name = 'constraint' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          type = 'a327A649B000A' 
          referencedEnd = 'a33EA67BB010F' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:StructuralFeature.multiplicity>
        </Model:Reference>
        <!-- ==================== Core.ModelElement.importer    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a3A4247EA0376' 
          name = 'importer' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          type = 'a327A5D19033E' 
          referencedEnd = 'a3A423EFE02DA' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:StructuralFeature.multiplicity>
        </Model:Reference>
        <!-- ==================== Core.ModelElement.namespace    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a396A41850138' 
          name = 'namespace' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          type = 'a32B69F3A0118' 
          referencedEnd = 'a3A2C18630036' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Reference>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Core.Namespace    [Class] ==================== -->
    <Model:Class xmi.id = 'a32B69F3A0118' 
      name = 'Namespace' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
      isSingleton = 'false' 
      supertypes = 'a327A5C7301CC' >
      <Model:ModelElement.annotation>A namespace is a part of a model that contains a set of ModelElements each of whose&#x000d;&#x000a;names designates a unique element within the namespace. &#x000d;&#x000a;&#x000d;&#x000a;In the metamodel, a Namespace is a ModelElement that can own other ModelElements, such as Classifiers. The name of each owned ModelElement must be unique within the Namespace. Moreover, each contained ModelElement is owned by at most one Namespace. The concrete subclasses of Namespace may have additional constraints on which kind of elements may be contained. &#x000d;&#x000a;&#x000d;&#x000a;Namespace is an abstract metaclass.&#x000d;&#x000a;&#x000d;&#x000a;Note that explicit parts of a model element, such as the features of a Classifier, are not modeled as owned elements in a namespace. A namespace is used for unstructured contents such as the contents of a  package, or a class declared inside the scope of another class.</Model:ModelElement.annotation>
      <Model:Namespace.contents>
        <!-- ==================== Core.Namespace.ownedElement    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a396A44E502DE' 
          name = 'ownedElement' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          type = 'a327A5C7301CC' 
          referencedEnd = 'a3A2C186203A1' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:StructuralFeature.multiplicity>
        </Model:Reference>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Core.Classifier    [Class] ==================== -->
    <Model:Class xmi.id = 'a32989FB2023D' 
      name = 'Classifier' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
      isSingleton = 'false' 
      supertypes = 'a32B69F3A0118' >
      <Model:ModelElement.annotation>A classifier is an element that describes structural and behavioral features; it comes in several specific forms, including class, data type, interface, component, and others that are defined in other metamodel packages.&#x000d;&#x000a;&#x000d;&#x000a;Classifier is often used as a type.&#x000d;&#x000a;&#x000d;&#x000a;In the metamodel, a Classifier may declare a collection of Features, such as Attributes, Operations and Methods. It has a name, which is unique in the Namespace enclosing the Classifier. Classifier is an abstract metaclass.&#x000d;&#x000a;&#x000d;&#x000a;Classifier is a child of Namespace. As a Namespace, a Classifier may declare other Classifiers nested in its scope. Nested Classifiers may be accessed by other Classifiers only if the nested Classifiers have adequate visibility. There are no data value or state consequences of nested Classifiers, i.e., it is not an aggregation or composition.</Model:ModelElement.annotation>
      <Model:Namespace.contents>
        <!-- ==================== Core.Classifier.isAbstract    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a3A6CAF830372' 
          name = 'isAbstract' annotation = 'An abstract Classifier is not instantiable.' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a33DD6F650276' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
        <!-- ==================== Core.Classifier.feature    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a396A45340213' 
          name = 'feature' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          type = 'a32989F9700FE' 
          referencedEnd = 'a32B5D7EF03DD' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'true' />
          </Model:StructuralFeature.multiplicity>
        </Model:Reference>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Core.Class    [Class] ==================== -->
    <Model:Class xmi.id = 'a3298A02900FE' 
      name = 'Class' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' 
      supertypes = 'a32989FB2023D' >
      <Model:ModelElement.annotation>A class is a description of a set of objects that share the same attributes, operations, methods, relationships, and semantics. A class may use a set of interfaces to specify collections of operations it provides to its environment. In the metamodel, a Class describes a set of objects sharing a collection of Features that are common to the set of objects.&#x000d;&#x000a;&#x000d;&#x000a;The purpose of a Class is to declare a collection of Features that fully describe the structure and behavior of objects. Some Classes may not be directly instantiated. These Classes are said to be abstract and exist only for other Classes to inherit and reuse the Features declared by them. No object may be a direct instance of an abstract Class, although an object may be an indirect instance of one through a subclass that is non-abstract.&#x000d;&#x000a;&#x000d;&#x000a;A Class acts as the namespace for various kinds of contained elements defined within its scope, including classes, interfaces and associations (note that this is purely a scoping construction and does not imply anything about aggregation). The contained classes can be used as ordinary classes in the container class. If a class inherits another class, the contents of the ancestor are available to its descendents if the visibility of an element is public or protected; however, if the visibility is private, then the element is not visible and therefore not available in the descendant.</Model:ModelElement.annotation>
    </Model:Class>
    <!-- ==================== Core.DataType    [Class] ==================== -->
    <Model:Class xmi.id = 'a3298A036025B' 
      name = 'DataType' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' 
      supertypes = 'a32989FB2023D' >
      <Model:ModelElement.annotation>A data type is a type whose values have no identity (i.e., they are pure values). Data types include primitive built-in types (such as integer and string) as well as definable enumeration types.&#x000d;&#x000a;&#x000d;&#x000a;In the metamodel, a DataType defines a special kind of Classifier in which operations are all pure functions (i.e., they can return data values but they cannot change data values, because they have no identity). For example, an "add" operation on a number with another number as an argument yields a third number as a result; the target and argument are unchanged.&#x000d;&#x000a;&#x000d;&#x000a;A DataType is a special kind of Classifier whose instances are primitive values, not objects. For example, integers and strings are usually treated as primitive values. A primitive value does not have an identity, so two occurrences of the same value cannot be differentiated. Usually, DataTypes are used for specification of the type of an attribute or parameter.</Model:ModelElement.annotation>
    </Model:Class>
    <!-- ==================== Core.Package    [Class] ==================== -->
    <Model:Class xmi.id = 'a327A5D19033E' 
      name = 'Package' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' 
      supertypes = 'a32B69F3A0118' >
      <Model:ModelElement.annotation>A package is a grouping of model elements.&#x000d;&#x000a;&#x000d;&#x000a;In the metamodel, Package is a subclass of Namespace. A Package contains ModelElements such as Packages and Classifiers. A Package may also contain Constraints and Dependencies between ModelElements of the Package.&#x000d;&#x000a;&#x000d;&#x000a;The purpose of the package construct is to provide a general grouping mechanism. In fact, its only semantics is to define a namespace for its contents. The package construct can be used for organizing elements for any purpose; the criteria to use for grouping elements together into one package are not defined.&#x000d;&#x000a;&#x000d;&#x000a;A package owns a set of model elements, with the implication that if the package is removed from the model, so are the elements owned by the package. Elements with names, such as classifiers, that are owned by the same package must have unique names within the package, although elements in different packages may have the same name.&#x000d;&#x000a;&#x000d;&#x000a;There may be relationships between elements contained in the same package, and between an element in one package and an element in a surrounding package at any level. In other words, elements &#x0093;see&#x0094; all the way out through nested levels of packages.&#x000d;&#x000a;&#x000d;&#x000a;Elements in peer packages, however, are encapsulated and are not a priori visible to each other. The same goes for elements in contained packages, i.e. packages do not see "inwards".&#x000d;&#x000a;&#x000d;&#x000a;Elements owned by a Package can be made available to other Packages by importing&#x000d;&#x000a;them. Although any ModelElement may be imported by a Package, imported&#x000d;&#x000a;ModelElements are typically other Packages. When an element is imported by a&#x000d;&#x000a;package it extends the namespace of that package. Thus the elements available in a&#x000d;&#x000a;Package consists of its owned and imported ModelElements.</Model:ModelElement.annotation>
      <Model:Namespace.contents>
        <!-- ==================== Core.Package.importedElement    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a3A24439702FF' 
          name = 'importedElement' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          type = 'a327A5C7301CC' 
          referencedEnd = 'a3A423EFE025D' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:StructuralFeature.multiplicity>
        </Model:Reference>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Core.Subsystem    [Class] ==================== -->
    <Model:Class xmi.id = 'a33CD6DE5030C' 
      name = 'Subsystem' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' 
      supertypes = 'a327A5D19033E a32989FB2023D' >
      <Model:ModelElement.annotation>A subsystem is a grouping of model elements that represents a behavioral unit in a physical system. A subsystem offers interfaces and has operations.&#x000d;&#x000a;&#x000d;&#x000a;In the metamodel, Subsystem is a subclass of both Package and Classifier. As such it may have a set of Features.&#x000d;&#x000a;&#x000d;&#x000a;The purpose of the subsystem construct is to provide a grouping mechanism for specifying a behavioral unit of a physical system. Apart from defining a namespace for its contents, a subsystem serves as a specification unit for the behavior of its contained model elements.&#x000d;&#x000a;&#x000d;&#x000a;The contents of a subsystem is defined in the same way as for a package, thus it&#x000d;&#x000a;consists of owned elements and imported elements, with unique names within the&#x000d;&#x000a;subsystem.</Model:ModelElement.annotation>
    </Model:Class>
    <!-- ==================== Core.Model    [Class] ==================== -->
    <Model:Class xmi.id = 'a327A5D1E0032' 
      name = 'Model' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' 
      supertypes = 'a327A5D19033E' >
      <Model:ModelElement.annotation>A model captures a view of a physical system. It is an abstraction of the physical system, with a certain purpose. The model completely describes those aspects of the physical system that are relevant to the purpose of the model, at the appropriate level of detail.&#x000d;&#x000a;&#x000d;&#x000a;In the metamodel, Model is a subclass of Package. It contains a containment hierarchy of ModelElements that together describe the physical system. A Model also contains a set of ModelElements that represents the environment of the system. &#x000d;&#x000a;&#x000d;&#x000a;Different Models can be defined for the same physical system, where each model represents a view of the physical system defined by its purpose and abstraction level, e.g. an analysis model, a design model, an implementation model. Typically different models are complementary and defined from the perspectives (viewpoints) of different system stakeholders.</Model:ModelElement.annotation>
    </Model:Class>
    <!-- ==================== Core.Feature    [Class] ==================== -->
    <Model:Class xmi.id = 'a32989F9700FE' 
      name = 'Feature' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
      isSingleton = 'false' 
      supertypes = 'a327A5C7301CC' >
      <Model:ModelElement.annotation>A feature is a property, like attribute or operation, which is encapsulated within a Classifier.&#x000d;&#x000a;&#x000d;&#x000a;In the metamodel, a Feature declares a structural or behavioral characteristic of an instance of a Classifier or of the Classifier itself. Feature is an abstract metaclass.</Model:ModelElement.annotation>
      <Model:Namespace.contents>
        <!-- ==================== Core.Feature.ownerScope    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a31653E23032A' 
          name = 'ownerScope' annotation = 'Specifies whether the Feature appears in every instance of the Classifier or whether it appears only once for the entire Classifier.' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a33DD7020032A' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
        <!-- ==================== Core.Feature.owner    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a396A45E803C8' 
          name = 'owner' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          type = 'a32989FB2023D' 
          referencedEnd = 'a32B5D7EF03D3' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Reference>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Core.StructuralFeature    [Class] ==================== -->
    <Model:Class xmi.id = 'a3298F1A403BF' 
      name = 'StructuralFeature' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
      isSingleton = 'false' 
      supertypes = 'a32989F9700FE' >
      <Model:ModelElement.annotation>A structural feature refers to a static feature of a model element.&#x000d;&#x000a;&#x000d;&#x000a;In the metamodel, a StructuralFeature declares a structural aspect of a Classifier that is typed, such as an attribute. For example, it specifies the multiplicity and changeability of the StructuralFeature. StructuralFeature is an abstract metaclass.</Model:ModelElement.annotation>
      <Model:Namespace.contents>
        <!-- ==================== Core.StructuralFeature.changeability    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a3163DE07014A' 
          name = 'changeability' annotation = 'Specifies whether the value may be modified after the object is created.' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a33DD6F820208' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
        <!-- ==================== Core.StructuralFeature.multiplicity    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a32B6AEA8032B' 
          name = 'multiplicity' annotation = 'The possible number of data values for the feature that may be held by an instance. The cardinality of the set of values is an implicit part of the feature. In the common case in which the multiplicity is 1..1, then the feature is a scalar (i.e., it holds exactly one value).' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a33DD6FC5001E' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
        <!-- ==================== Core.StructuralFeature.ordering    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a3A6F5A180348' 
          name = 'ordering' annotation = 'Specifies whether the set of instances is ordered. The ordering must be determined and maintained by Operations that add values to the feature. This property is only relevant if the multiplicity is greater than one.' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a36619BC301D6' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
        <!-- ==================== Core.StructuralFeature.targetScope    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a335A35E5028A' 
          name = 'targetScope' annotation = 'Specifies whether the targets are ordinary Instances or are Classifiers.' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a33DD7020032A' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
        <!-- ==================== Core.StructuralFeature.type    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a396A463C0232' 
          name = 'type' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          type = 'a32989FB2023D' 
          referencedEnd = 'a316437C003B6' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Reference>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Core.Attribute    [Class] ==================== -->
    <Model:Class xmi.id = 'a3A6F62780143' 
      name = 'Attribute' annotation = 'An Attribute describes a named slot within a classifier that may hold a value.' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' 
      supertypes = 'a3298F1A403BF' >
      <Model:Namespace.contents>
        <!-- ==================== Core.Attribute.initialValue    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a3A6F62980289' 
          name = 'initialValue' annotation = 'An Expression specifying the value of the attribute upon initialization. It is meant to be evaluated at the time the object is initialized. (Note that an explicit constructor may supersede an initial value.)' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a33CFA00203A2' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Core.Constraint    [Class] ==================== -->
    <Model:Class xmi.id = 'a327A649B000A' 
      name = 'Constraint' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' 
      supertypes = 'a327A5C7301CC' >
      <Model:ModelElement.annotation>A constraint is a semantic condition or restriction expressed in text.&#x000d;&#x000a;&#x000d;&#x000a;In the metamodel, a Constraint is a BooleanExpression on an associated ModelElement(s) which must be true for the model to be well formed. This restriction can be stated in natural language, or in different kinds of languages with well-defined semantics. Certain Constraints are predefined, others may be user defined. Note that a Constraint is an assertion, not an executable mechanism.&#x000d;&#x000a;&#x000d;&#x000a;The specification is written as an expression in a designated constraint language. The language can be specially designed for writing constraints (such as OCL), a programming language, mathematical notation, or natural language. If constraints are to be enforced by a model editor tool, then the tool must understand the syntax and semantics of the constraint language. Because the choice of language is arbitrary, constraints can be used as an extension mechanism.&#x000d;&#x000a;&#x000d;&#x000a;The constraint concept allows new semantics to be specified linguistically for a model element. In the metamodel a Constraint directly attached to a ModelElement describes semantic restrictions that this ModelElement must obey.&#x000d;&#x000a;</Model:ModelElement.annotation>
      <Model:Namespace.contents>
        <!-- ==================== Core.Constraint.body    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a32866F630244' 
          name = 'body' annotation = 'A BooleanExpression that must be true when evaluated for an instance of a system to be well-formed. A boolean expression defining the constraint. Expressions are written as strings in a designated language. For the model to be well formed, the expression must always yield a true value when evaluated for instances of the constrained elements at any time when the system is stable (i.e., not during the execution of an atomic operation).' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a33CFA9DA01D6' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
        <!-- ==================== Core.Constraint.constrainedElement    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a396A47950000' 
          name = 'constrainedElement' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          type = 'a327A5C7301CC' 
          referencedEnd = 'a33EA67BB010E' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'true' />
          </Model:StructuralFeature.multiplicity>
        </Model:Reference>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Core.org.omg.mof.idl_substitute_name=UmlConstraint    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.961' 
      name = 'org.omg.mof.idl_substitute_name=UmlConstraint' annotation = '' 
      tagId = 'org.omg.mof.idl_substitute_name' 
      elements = 'a327A649B000A' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>UmlConstraint</XMI.any>
      </Model:Tag.values>
    </Model:Tag>
    <!-- ==================== Core.Dependency    [Class] ==================== -->
    <Model:Class xmi.id = 'a327A646F00E6' 
      name = 'Dependency' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' 
      supertypes = 'a327A5C7301CC' >
      <Model:ModelElement.annotation>A dependency states that the implementation or functioning of one or more elements requires the presence of one or more other elements.&#x000d;&#x000a;&#x000d;&#x000a;In the metamodel, a Dependency is a directed relationship from a client (or clients) to a supplier (or suppliers) stating that the client is dependent on the supplier (i.e., the client element requires the presence and knowledge of the supplier element).&#x000d;&#x000a;&#x000d;&#x000a;A dependency specifies that the semantics of a set of model elements requires the presence of another set of model elements. This implies that if the source is somehow modified, the dependents probably must be modified. The reason for the dependency can be specified in several different ways (e.g., using natural language or an algorithm) but is often implicit.&#x000d;&#x000a;&#x000d;&#x000a;Whenever the supplier element of a dependency changes, the client element is potentially invalidated. After such invalidation, a check should be performed followed by possible changes to the derived client element. Such a check should be performed after which action can be taken to change the derived element to validate it again.</Model:ModelElement.annotation>
      <Model:Namespace.contents>
        <!-- ==================== Core.Dependency.kind    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a3A6C9FD2027C' 
          name = 'kind' annotation = 'Contains a description of the nature of the dependency relationship between the client and supplier. The list of possible values is open-ended. However, CWM predefines the values "Abstraction" and "Usage".' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a33DD702401B8' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
        <!-- ==================== Core.Dependency.client    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a396A4B0D0213' 
          name = 'client' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          type = 'a327A5C7301CC' 
          referencedEnd = 'a33FFE57B0395' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:StructuralFeature.multiplicity>
        </Model:Reference>
        <!-- ==================== Core.Dependency.supplier    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a396A4B10002E' 
          name = 'supplier' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          type = 'a327A5C7301CC' 
          referencedEnd = 'a335C0D7A02A8' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:StructuralFeature.multiplicity>
        </Model:Reference>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Core.Expression    [Class] ==================== -->
    <Model:Class xmi.id = 'a33CFA00203A2' 
      name = 'Expression' annotation = 'In the metamodel an Expression defines a statement which will evaluate to a (possibly empty) set of instances when executed in a context. An Expression does not modify the environment in which it is evaluated. An expression contains an expression string and the name of an interpretation language with which to evaluate the string.' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' 
      supertypes = 'a327A5C330208' >
      <Model:Namespace.contents>
        <!-- ==================== Core.Expression.body    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a33E12E870203' 
          name = 'body' annotation = 'The text of the expression expressed in the given language.' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a33DD702401B8' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
        <!-- ==================== Core.Expression.language    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a33E12E5F01CA' 
          name = 'language' annotation = 'Names the language in which the expression body is represented. The interpretation of the expression depends on the language. If the language name is omitted, no interpretation for the expression can be assumed. In general, a language name should be spelled and capitalized exactly as it appears in the document defining the language. For example, use COBOL, not Cobol; use Ada, not ADA; use PostScript, not Postscript.' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a33DD6FCF03C0' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Core.BooleanExpression    [Class] ==================== -->
    <Model:Class xmi.id = 'a33CFA9DA01D6' 
      name = 'BooleanExpression' annotation = 'In the metamodel BooleanExpression defines a statement which will evaluate to an instance of Boolean when it is evaluated.' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' 
      supertypes = 'a33CFA00203A2' >
    </Model:Class>
    <!-- ==================== Core.ProcedureExpression    [Class] ==================== -->
    <Model:Class xmi.id = 'a363559050190' 
      name = 'ProcedureExpression' annotation = 'In the metamodel ProcedureExpression defines a statement which will result in a change to the values of its environment when it is evaluated.' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' 
      supertypes = 'a33CFA00203A2' >
    </Model:Class>
    <!-- ==================== Core.Multiplicity    [Class] ==================== -->
    <Model:Class xmi.id = 'a33DD6FC5001E' 
      name = 'Multiplicity' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' 
      supertypes = 'a327A5C330208' >
      <Model:ModelElement.annotation>In the metamodel a Multiplicity defines a non-empty set of non-negative integers. A set which only contains zero ({0}) is not considered a valid Multiplicity. Every Multiplicity has at least one corresponding String  representation.&#x000d;&#x000a;</Model:ModelElement.annotation>
      <Model:Namespace.contents>
        <!-- ==================== Core.Multiplicity.range    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a396A3FA7038A' 
          name = 'range' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          type = 'a33E93BD00075' 
          referencedEnd = 'a33FF95B90378' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:StructuralFeature.multiplicity>
        </Model:Reference>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Core.MultiplicityRange    [Class] ==================== -->
    <Model:Class xmi.id = 'a33E93BD00075' 
      name = 'MultiplicityRange' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' 
      supertypes = 'a327A5C330208' >
      <Model:ModelElement.annotation>In the metamodel a MultiplicityRange defines a range of integers. The upper bound of the range cannot be below the lower bound. The lower bound must be a nonnegative integer. The upper bound must be a nonnegative integer or the special value unlimited, which indicates there is no upper bound on the range. &#x000d;&#x000a;</Model:ModelElement.annotation>
      <Model:Namespace.contents>
        <!-- ==================== Core.MultiplicityRange.lower    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a33E93BE902E8' 
          name = 'lower' annotation = 'Specifies the positive integer lower bound of the range.' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a33DD6FD7021C' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
        <!-- ==================== Core.MultiplicityRange.upper    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a33E93BFA0329' 
          name = 'upper' annotation = 'Specifies the upper bound of the range, which is a positive integer or the special value &#x0092;unlimited&#x0092; indicating no upper bound is defined.' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a3635582D03D4' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
        <!-- ==================== Core.MultiplicityRange.multiplicity    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a396A403D006D' 
          name = 'multiplicity' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          type = 'a33DD6FC5001E' 
          referencedEnd = 'a33FF95B90300' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Reference>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Core.Stereotype    [Class] ==================== -->
    <Model:Class xmi.id = 'a3A24417902EF' 
      name = 'Stereotype' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' 
      supertypes = 'a327A5C7301CC' >
      <Model:ModelElement.annotation>The stereotype concept provides a way of branding (classifying) model elements so that they behave as if they were instances of new virtual metamodel constructs. These model elements have the same structure (attributes, associations, operations) as similar non-stereotyped model elements of the same kind. The stereotype may specify additional constraints and required tagged values that apply to model elements. In addition, a stereotype may be used to indicate a difference in meaning or usage between two model elements with identical structure.&#x000d;&#x000a;&#x000d;&#x000a;In the metamodel the Stereotype metaclass is a subclass of ModelElement. Tagged Values and Constraints attached to a Stereotype apply to all ModelElements branded by that Stereotype.&#x000d;&#x000a;&#x000d;&#x000a;A stereotype keeps track of the base class to which it may be applied. The base class is a class in the metamodel (not a user-level modeling element) such as Class, Association, etc. If a model element is branded by an attached stereotype, then the CWM base class of the model element must be the base class specified by the stereotype or one of the subclasses of that base class.</Model:ModelElement.annotation>
      <Model:Namespace.contents>
        <!-- ==================== Core.Stereotype.baseClass    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a3A24427E031E' 
          name = 'baseClass' annotation = 'Specifies the name of a modeling element to which the stereotype applies, such as Class, Association, Constraint, etc. This is the name of a metaclass, that is, a class from the metamodel itself rather than a user model class.' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a33DD6FCF03C0' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
        <!-- ==================== Core.Stereotype.extendedElement    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a3A2444AD00AD' 
          name = 'extendedElement' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          type = 'a327A5C7301CC' 
          referencedEnd = 'a3A2442F90292' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:StructuralFeature.multiplicity>
        </Model:Reference>
        <!-- ==================== Core.Stereotype.requiredTag    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a3A2444AB0234' 
          name = 'requiredTag' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          type = 'a337A4EF7002C' 
          referencedEnd = 'a3A2446850021' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:StructuralFeature.multiplicity>
        </Model:Reference>
        <!-- ==================== Core.Stereotype.stereotypeConstraint    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a3A244510011B' 
          name = 'stereotypeConstraint' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          type = 'a327A649B000A' 
          referencedEnd = 'a3A2D210E0353' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:StructuralFeature.multiplicity>
        </Model:Reference>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Core.TaggedValue    [Class] ==================== -->
    <Model:Class xmi.id = 'a337A4EF7002C' 
      name = 'TaggedValue' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' 
      supertypes = 'a327A5C330208' >
      <Model:ModelElement.annotation>A tagged value allows information to be attached to any model element in the form of a "tagged value" pair (i.e., name = value). The interpretation of tagged value semantics is intentionally beyond the scope of CWM. It must be determined by user or tool conventions. It is expected that tools will define tags to supply information needed for their operations beyond the basic semantics of CWM. Such information could include code generation options, model management information, or user-specified semantics.&#x000d;&#x000a;&#x000d;&#x000a;Even though TaggedValues are a simple and straightforward extension technique, their use restricts semantic interchange of metadata to only those tools that share a common understanding of the specific tagged value names.</Model:ModelElement.annotation>
      <Model:Namespace.contents>
        <!-- ==================== Core.TaggedValue.tag    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a33E901140334' 
          name = 'tag' annotation = 'Contains the name of the TaggedValue. This name determines the semantics that are applicable to the contents of the value attribute.' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a33DD6FCF03C0' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
        <!-- ==================== Core.TaggedValue.value    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a337A50700273' 
          name = 'value' annotation = 'Contains the current value of the TaggedValue.' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' 
          type = 'a33DD702401B8' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
        </Model:Attribute>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Core.org.omg.mof.idl_substitute_name=umlValue    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.962' 
      name = 'org.omg.mof.idl_substitute_name=umlValue' annotation = '' 
      tagId = 'org.omg.mof.idl_substitute_name' 
      elements = 'a337A50700273' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>umlValue</XMI.any>
      </Model:Tag.values>
    </Model:Tag>
    <!-- ==================== Core.Any    [DataType] ==================== -->
    <Model:DataType xmi.id = 'a37AB1FF90221' 
      name = 'Any' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' >
      <Model:ModelElement.annotation>The Any data type is used to indicate that an attribute or parameter may take values from any of the available data types. In CWM, the set of data types an Any attribute or parameter may assume includes the data types and enumerations described in this chapter plus any available instances of the Classifier class. &#x000d;&#x000a;&#x000d;&#x000a;There is no default value for data type Any.</Model:ModelElement.annotation>
      <Model:DataType.typeCode>
        <XMI.CorbaTypeCode>
          <XMI.CorbaTcAny/>
        </XMI.CorbaTypeCode>
      </Model:DataType.typeCode>
    </Model:DataType>
    <!-- ==================== Core.Boolean    [DataType] ==================== -->
    <Model:DataType xmi.id = 'a33DD6F650276' 
      name = 'Boolean' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' >
      <Model:ModelElement.annotation>Boolean defines an enumeration that denotes a logical condition.&#x000d;&#x000a;&#x000d;&#x000a;The default for data type Boolean is false.</Model:ModelElement.annotation>
      <Model:DataType.typeCode>
        <XMI.CorbaTypeCode>
          <XMI.CorbaTcBoolean/>
        </XMI.CorbaTypeCode>
      </Model:DataType.typeCode>
    </Model:DataType>
    <!-- ==================== Core.Float    [DataType] ==================== -->
    <Model:DataType xmi.id = 'a384FE9DE02A2' 
      name = 'Float' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' >
      <Model:ModelElement.annotation>The Float data type is used to indicate that an attribute or parameter may take on floating point numeric values. The number of significant digits and other representational details are implementation defined. &#x000d;&#x000a;&#x000d;&#x000a;The default for the Float data type is the value 0.0.</Model:ModelElement.annotation>
      <Model:DataType.typeCode>
        <XMI.CorbaTypeCode>
          <XMI.CorbaTcFloat/>
        </XMI.CorbaTypeCode>
      </Model:DataType.typeCode>
    </Model:DataType>
    <!-- ==================== Core.Integer    [DataType] ==================== -->
    <Model:DataType xmi.id = 'a33DD6FD7021C' 
      name = 'Integer' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' >
      <Model:ModelElement.annotation>Integer represents the predefined type of integers. An instance of Integer is an element in the (infinite) set of integers (..., -2, -1, 0, 1, 2, ...). &#x000d;&#x000a;&#x000d;&#x000a;The default for Integer is 0.</Model:ModelElement.annotation>
      <Model:DataType.typeCode>
        <XMI.CorbaTypeCode>
          <XMI.CorbaTcLong/>
        </XMI.CorbaTypeCode>
      </Model:DataType.typeCode>
    </Model:DataType>
    <!-- ==================== Core.Name    [DataType] ==================== -->
    <Model:DataType xmi.id = 'a33DD6FCF03C0' 
      name = 'Name' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' >
      <Model:ModelElement.annotation>Name defines a token which is used for naming ModelElements and similar usages. Each Name has a corresponding String representation. For purposes of exchange a name should be represented as a String.&#x000d;&#x000a;&#x000d;&#x000a;The default for the Name data type is an empty string.</Model:ModelElement.annotation>
      <Model:DataType.typeCode>
        <XMI.CorbaTypeCode>
          <XMI.CorbaTcAlias xmi.tcName = 'Name'>
          <XMI.CorbaTypeCode>
            <XMI.CorbaTcString xmi.tcLength = '0'/>
          </XMI.CorbaTypeCode>
          </XMI.CorbaTcAlias>
        </XMI.CorbaTypeCode>
      </Model:DataType.typeCode>
    </Model:DataType>
    <!-- ==================== Core.String    [DataType] ==================== -->
    <Model:DataType xmi.id = 'a33DD702401B8' 
      name = 'String' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' >
      <Model:ModelElement.annotation>String defines a piece of text. Strings do not normally have a defined length; rather, they are considered to be arbitrarily long (practical limits on the length of Strings exist, but are implementation dependent). When String is used as the type of an Attribute, string length sometimes can be specified (see the Relational and Record packages for examples).&#x000d;&#x000a;&#x000d;&#x000a;The default for the String data type is an empty string.</Model:ModelElement.annotation>
      <Model:DataType.typeCode>
        <XMI.CorbaTypeCode>
          <XMI.CorbaTcString xmi.tcLength = '0'/>
        </XMI.CorbaTypeCode>
      </Model:DataType.typeCode>
    </Model:DataType>
    <!-- ==================== Core.Time    [DataType] ==================== -->
    <Model:DataType xmi.id = 'a3A09E1C0001E' 
      name = 'Time' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' >
      <Model:ModelElement.annotation>Time defines a statement which will define the time of occurrence of an event. The specific format of time expressions is not specified here and is subject to implementation considerations.&#x000d;&#x000a;&#x000d;&#x000a;There is no default for the Time data type.</Model:ModelElement.annotation>
      <Model:DataType.typeCode>
        <XMI.CorbaTypeCode>
          <XMI.CorbaTcAlias xmi.tcName = 'Time'>
          <XMI.CorbaTypeCode>
            <XMI.CorbaTcString xmi.tcLength = '0'/>
          </XMI.CorbaTypeCode>
          </XMI.CorbaTcAlias>
        </XMI.CorbaTypeCode>
      </Model:DataType.typeCode>
    </Model:DataType>
    <!-- ==================== Core.UnlimitedInteger    [DataType] ==================== -->
    <Model:DataType xmi.id = 'a3635582D03D4' 
      name = 'UnlimitedInteger' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' >
      <Model:ModelElement.annotation>UnlimitedInteger defines a data type whose range is the nonnegative integers augmented by the special value "unlimited". It is used for the upper bound of multiplicities.&#x000d;&#x000a;&#x000d;&#x000a;The default for an UnlimitedInteger is the special value "unlimited".</Model:ModelElement.annotation>
      <Model:DataType.typeCode>
        <XMI.CorbaTypeCode>
          <XMI.CorbaTcAlias xmi.tcName = 'UnlimitedInteger'>
          <XMI.CorbaTypeCode>
            <XMI.CorbaTcLong/>
          </XMI.CorbaTypeCode>
          </XMI.CorbaTcAlias>
        </XMI.CorbaTypeCode>
      </Model:DataType.typeCode>
    </Model:DataType>
    <!-- ==================== Core.ChangeableKind    [DataType] ==================== -->
    <Model:DataType xmi.id = 'a33DD6F820208' 
      name = 'ChangeableKind' annotation = '' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' >
      <Model:DataType.typeCode>
        <XMI.CorbaTypeCode>
          <XMI.CorbaTcEnum xmi.tcName = 'ChangeableKind'>
          <XMI.CorbaTcEnumLabel xmi.tcName = 'ck_changeable'/>
          <XMI.CorbaTcEnumLabel xmi.tcName = 'ck_frozen'/>
          <XMI.CorbaTcEnumLabel xmi.tcName = 'ck_addOnly'/>
          </XMI.CorbaTcEnum>
        </XMI.CorbaTypeCode>
      </Model:DataType.typeCode>
    </Model:DataType>
    <!-- ==================== Core.org.omg.xmi.enumerationUnprefix=ck_    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.963' 
      name = 'org.omg.xmi.enumerationUnprefix=ck_' annotation = '' 
      tagId = 'org.omg.xmi.enumerationUnprefix' 
      elements = 'a33DD6F820208' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>ck_</XMI.any>
      </Model:Tag.values>
    </Model:Tag>
    <!-- ==================== Core.OrderingKind    [DataType] ==================== -->
    <Model:DataType xmi.id = 'a36619BC301D6' 
      name = 'OrderingKind' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' >
      <Model:ModelElement.annotation>In the metamodel OrderingKind defines an enumeration that specifies how the elements of a set are arranged. Used in conjunction with elements that have a multiplicity in cases when the multiplicity value is greater than one. The ordering must be determined and maintained by operations that modify the set.&#x000d;&#x000a;&#x000d;&#x000a;The default value is ok_unordered.</Model:ModelElement.annotation>
      <Model:DataType.typeCode>
        <XMI.CorbaTypeCode>
          <XMI.CorbaTcEnum xmi.tcName = 'OrderingKind'>
          <XMI.CorbaTcEnumLabel xmi.tcName = 'ok_unordered'/>
          <XMI.CorbaTcEnumLabel xmi.tcName = 'ok_ordered'/>
          </XMI.CorbaTcEnum>
        </XMI.CorbaTypeCode>
      </Model:DataType.typeCode>
    </Model:DataType>
    <!-- ==================== Core.org.omg.xmi.enumerationUnprefix=ok_    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.964' 
      name = 'org.omg.xmi.enumerationUnprefix=ok_' annotation = '' 
      tagId = 'org.omg.xmi.enumerationUnprefix' 
      elements = 'a36619BC301D6' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>ok_</XMI.any>
      </Model:Tag.values>
    </Model:Tag>
    <!-- ==================== Core.ScopeKind    [DataType] ==================== -->
    <Model:DataType xmi.id = 'a33DD7020032A' 
      name = 'ScopeKind' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' >
      <Model:ModelElement.annotation>In the metamodel ScopeKind defines an enumeration that denotes whether a feature belongs to individual instances or an entire classifier.&#x000d;&#x000a;&#x000d;&#x000a;The default value is sk_instance.</Model:ModelElement.annotation>
      <Model:DataType.typeCode>
        <XMI.CorbaTypeCode>
          <XMI.CorbaTcEnum xmi.tcName = 'ScopeKind'>
          <XMI.CorbaTcEnumLabel xmi.tcName = 'sk_instance'/>
          <XMI.CorbaTcEnumLabel xmi.tcName = 'sk_classifier'/>
          </XMI.CorbaTcEnum>
        </XMI.CorbaTypeCode>
      </Model:DataType.typeCode>
    </Model:DataType>
    <!-- ==================== Core.org.omg.xmi.enumerationUnprefix=sk_    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.965' 
      name = 'org.omg.xmi.enumerationUnprefix=sk_' annotation = '' 
      tagId = 'org.omg.xmi.enumerationUnprefix' 
      elements = 'a33DD7020032A' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>sk_</XMI.any>
      </Model:Tag.values>
    </Model:Tag>
    <!-- ==================== Core.VisibilityKind    [DataType] ==================== -->
    <Model:DataType xmi.id = 'a3A705EFD0201' 
      name = 'VisibilityKind' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' >
      <Model:ModelElement.annotation>In the metamodel VisibilityKind defines an enumeration that denotes how the element to which it refers is seen outside the enclosing name space.&#x000d;&#x000a;&#x000d;&#x000a;The default value is vk_public.</Model:ModelElement.annotation>
      <Model:DataType.typeCode>
        <XMI.CorbaTypeCode>
          <XMI.CorbaTcEnum xmi.tcName = 'VisibilityKind'>
          <XMI.CorbaTcEnumLabel xmi.tcName = 'vk_public'/>
          <XMI.CorbaTcEnumLabel xmi.tcName = 'vk_protected'/>
          <XMI.CorbaTcEnumLabel xmi.tcName = 'vk_private'/>
          <XMI.CorbaTcEnumLabel xmi.tcName = 'vk_package'/>
          <XMI.CorbaTcEnumLabel xmi.tcName = 'vk_notapplicable'/>
          </XMI.CorbaTcEnum>
        </XMI.CorbaTypeCode>
      </Model:DataType.typeCode>
    </Model:DataType>
    <!-- ==================== Core.org.omg.xmi.enumerationUnprefix=vk_    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.966' 
      name = 'org.omg.xmi.enumerationUnprefix=vk_' annotation = '' 
      tagId = 'org.omg.xmi.enumerationUnprefix' 
      elements = 'a3A705EFD0201' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>vk_</XMI.any>
      </Model:Tag.values>
    </Model:Tag>
    <!-- ==================== Core.ClassifierFeature    [Association] ==================== -->
    <Model:Association xmi.id = 'a32B5D7EE02FF' 
      name = 'ClassifierFeature' annotation = 'The ClassifierFeature association provides a composite aggregation containment relationship between Classifiers and the Features they own. The feature end of the association is ordered allowing preservation of the ordering of Features within their owning Classifier. A Feature can be owned by at most one Classifier. The optional character of ownership is intended as a convenience to tools, allowing them to create Features prior to linking them to their owning Classifier.' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'protected_vis' 
      isDerived = 'false' >
      <Model:Namespace.contents>
        <Model:AssociationEnd xmi.id = 'a32B5D7EF03D3' 
          name = 'owner' annotation = '' 
          isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' 
          type = 'a32989FB2023D' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
        <Model:AssociationEnd xmi.id = 'a32B5D7EF03DD' 
          name = 'feature' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' 
          type = 'a32989F9700FE' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
      </Model:Namespace.contents>
    </Model:Association>
    <!-- ==================== Core.DependencyClient    [Association] ==================== -->
    <Model:Association xmi.id = 'a33FFE57902A2' 
      name = 'DependencyClient' annotation = 'The DependencyClient association links Dependency instances with ModelElements that act as clients in the represented dependency relationship.' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'protected_vis' 
      isDerived = 'false' >
      <Model:Namespace.contents>
        <Model:AssociationEnd xmi.id = 'a33FFE57B0395' 
          name = 'client' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' 
          type = 'a327A5C7301CC' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
        <Model:AssociationEnd xmi.id = 'a33FFE57B03B3' 
          name = 'clientDependency' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' 
          type = 'a327A646F00E6' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
      </Model:Namespace.contents>
    </Model:Association>
    <!-- ==================== Core.DependencySupplier    [Association] ==================== -->
    <Model:Association xmi.id = 'a335C0D770302' 
      name = 'DependencySupplier' annotation = 'The DependencySupplier association links Dependency instances with ModelElements that act as suppliers in the represented dependency relationship.' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
      isDerived = 'false' >
      <Model:Namespace.contents>
        <Model:AssociationEnd xmi.id = 'a335C0D7A02A8' 
          name = 'supplier' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' 
          type = 'a327A5C7301CC' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
        <Model:AssociationEnd xmi.id = 'a335C0D7A02E4' 
          name = 'supplierDependency' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' 
          type = 'a327A646F00E6' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
      </Model:Namespace.contents>
    </Model:Association>
    <!-- ==================== Core.ElementConstraint    [Association] ==================== -->
    <Model:Association xmi.id = 'a33EA67B702EE' 
      name = 'ElementConstraint' annotation = 'The ElementConstraint association provides linkages between ModelElements and the Constraint instances that constrain their state. Note that a Constraint instance may not simultaneously participate in both the ElementConstraint and the StereotypeConstraint associations.' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'protected_vis' 
      isDerived = 'false' >
      <Model:Namespace.contents>
        <Model:AssociationEnd xmi.id = 'a33EA67BB010E' 
          name = 'constrainedElement' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' 
          type = 'a327A5C7301CC' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
        <Model:AssociationEnd xmi.id = 'a33EA67BB010F' 
          name = 'constraint' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' 
          type = 'a327A649B000A' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
      </Model:Namespace.contents>
    </Model:Association>
    <!-- ==================== Core.org.omg.mof.idl_substitute_name=umlConstraint    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.967' 
      name = 'org.omg.mof.idl_substitute_name=umlConstraint' annotation = '' 
      tagId = 'org.omg.mof.idl_substitute_name' 
      elements = 'a33EA67BB010F' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>umlConstraint</XMI.any>
      </Model:Tag.values>
    </Model:Tag>
    <!-- ==================== Core.ElementOwnership    [Association] ==================== -->
    <Model:Association xmi.id = 'a3A2C18610353' 
      name = 'ElementOwnership' annotation = 'The ElementOwnership association identifies ModelElements owned by Namespaces. ModelElements may be owned by at most one Namespace. Refer to the above discussion of the Namespace class for more information on the nature of the ownership relationship between Namespaces and ModelElements.' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'protected_vis' 
      isDerived = 'false' >
      <Model:Namespace.contents>
        <Model:AssociationEnd xmi.id = 'a3A2C186203A1' 
          name = 'ownedElement' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' 
          type = 'a327A5C7301CC' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
        <Model:AssociationEnd xmi.id = 'a3A2C18630036' 
          name = 'namespace' annotation = '' 
          isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' 
          type = 'a32B69F3A0118' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
      </Model:Namespace.contents>
    </Model:Association>
    <!-- ==================== Core.ImportedElements    [Association] ==================== -->
    <Model:Association xmi.id = 'a3A423EFD02DA' 
      name = 'ImportedElements' annotation = 'The ImportedElements association identifies ModelElements that a Package instance imports from other Namespaces. Although any ModelElement may be imported by a Package, imported ModelElements are typically other Packages or aggregate Classifiers, such as Class instances.' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'protected_vis' 
      isDerived = 'false' >
      <Model:Namespace.contents>
        <Model:AssociationEnd xmi.id = 'a3A423EFE025D' 
          name = 'importedElement' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' 
          type = 'a327A5C7301CC' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
        <Model:AssociationEnd xmi.id = 'a3A423EFE02DA' 
          name = 'importer' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' 
          type = 'a327A5D19033E' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
      </Model:Namespace.contents>
    </Model:Association>
    <!-- ==================== Core.RangeMultiplicity    [Association] ==================== -->
    <Model:Association xmi.id = 'a33FF95B90061' 
      name = 'RangeMultiplicity' annotation = 'The RangeMultiplicity association identifies the set of MultiplicityRange instances that specify the lower and upper bounds of individual cardinality ranges defined by a Multiplicity instance. A MultiplicityRange instance must be owned by a single Multiplicity instance.' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'protected_vis' 
      isDerived = 'false' >
      <Model:Namespace.contents>
        <Model:AssociationEnd xmi.id = 'a33FF95B90300' 
          name = 'multiplicity' annotation = '' 
          isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' 
          type = 'a33DD6FC5001E' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
        <Model:AssociationEnd xmi.id = 'a33FF95B90378' 
          name = 'range' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' 
          type = 'a33E93BD00075' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
      </Model:Namespace.contents>
    </Model:Association>
    <!-- ==================== Core.StereotypeConstraints    [Association] ==================== -->
    <Model:Association xmi.id = 'a3A2D210D02D6' 
      name = 'StereotypeConstraints' annotation = 'The StereotypeConstraints association links Stereotypes with Constraints that further restrict the states that a stereotyped ModelElement may assume. A Constraint instance may not simultaneously participate in both the StereotypeContraints association and the ElementConstraint association.' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
      isDerived = 'false' >
      <Model:Namespace.contents>
        <Model:AssociationEnd xmi.id = 'a3A2D210E0353' 
          name = 'stereotypeConstraint' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' 
          type = 'a327A649B000A' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
        <Model:AssociationEnd xmi.id = 'a3A2D210E0372' 
          name = 'constrainedStereotype' annotation = '' 
          isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' 
          type = 'a3A24417902EF' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
      </Model:Namespace.contents>
    </Model:Association>
    <!-- ==================== Core.StereotypedElement    [Association] ==================== -->
    <Model:Association xmi.id = 'a3A2442F80244' 
      name = 'StereotypedElement' annotation = 'The StereotypedElement association links Stereotypes with the ModelElements to which they apply. ' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
      isDerived = 'false' >
      <Model:Namespace.contents>
        <Model:AssociationEnd xmi.id = 'a3A2442F90292' 
          name = 'extendedElement' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' 
          type = 'a327A5C7301CC' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
        <Model:AssociationEnd xmi.id = 'a3A2442F902FF' 
          name = 'stereotype' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' 
          type = 'a3A24417902EF' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
      </Model:Namespace.contents>
    </Model:Association>
    <!-- ==================== Core.StereotypeTaggedValues    [Association] ==================== -->
    <Model:Association xmi.id = 'a3A24468302EF' 
      name = 'StereotypeTaggedValues' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'protected_vis' 
      isDerived = 'false' >
      <Model:ModelElement.annotation>The StereotypeTaggedValues association links Stereotypes with the set of TaggedValues they require.&#x000d;&#x000a;&#x000d;&#x000a;TaggedValues cannot simultaneously participate in both the TaggedElement and StereotypeTaggedValues associations.</Model:ModelElement.annotation>
      <Model:Namespace.contents>
        <Model:AssociationEnd xmi.id = 'a3A2446850021' 
          name = 'requiredTag' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' 
          type = 'a337A4EF7002C' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
        <Model:AssociationEnd xmi.id = 'a3A2446850030' 
          name = 'stereotype' annotation = '' 
          isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' 
          type = 'a3A24417902EF' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
      </Model:Namespace.contents>
    </Model:Association>
    <!-- ==================== Core.StructuralFeatureType    [Association] ==================== -->
    <Model:Association xmi.id = 'a316437BF0352' 
      name = 'StructuralFeatureType' annotation = 'The StructuralFeatureType association identifies the Classifier instance that defines the type of particular StructuralFeatures. A StructuralFeature instance must have a Classifier instance that defines its type.' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
      isDerived = 'false' >
      <Model:Namespace.contents>
        <Model:AssociationEnd xmi.id = 'a316437C002DA' 
          name = 'structuralFeature' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' 
          type = 'a3298F1A403BF' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
        <Model:AssociationEnd xmi.id = 'a316437C003B6' 
          name = 'type' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' 
          type = 'a32989FB2023D' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
      </Model:Namespace.contents>
    </Model:Association>
    <!-- ==================== Core.TaggedElement    [Association] ==================== -->
    <Model:Association xmi.id = 'a33E901DD001E' 
      name = 'TaggedElement' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
      isDerived = 'false' >
      <Model:ModelElement.annotation>The TaggedElement association links TaggedValues with the ModelElements that own them.&#x000d;&#x000a;&#x000d;&#x000a;TaggedValues cannot simultaneously participate in both the TaggedElement and StereotypeTaggedValues associations.&#x000d;&#x000a;&#x000d;&#x000a;</Model:ModelElement.annotation>
      <Model:Namespace.contents>
        <Model:AssociationEnd xmi.id = 'a33E901E003D4' 
          name = 'modelElement' annotation = '' 
          isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' 
          type = 'a327A5C7301CC' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
        <Model:AssociationEnd xmi.id = 'a33E901E10028' 
          name = 'taggedValue' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' 
          type = 'a337A4EF7002C' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
        </Model:AssociationEnd>
      </Model:Namespace.contents>
    </Model:Association>
  </Model:Namespace.contents>
</Model:Package>
<!-- ==================== Model    [Package] ==================== -->
<Model:Package xmi.id = 'a3FBA74B40343' 
  name = 'Model' annotation = '' 
  isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' >
  <Model:Namespace.contents>
    <!-- ==================== Model.org.omg.mof.idl_prefix=org.omg.mof    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.1200' 
      name = 'org.omg.mof.idl_prefix=org.omg.mof' annotation = '' 
      tagId = 'org.omg.mof.idl_prefix' 
      elements = 'a3FBA74B40343' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>org.omg.mof</XMI.any>
      </Model:Tag.values>
    </Model:Tag>
    <!-- ==================== Model.org.omg.xmi.namespace=MOF    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.1201' 
      name = 'org.omg.xmi.namespace=MOF' annotation = '' 
      tagId = 'org.omg.xmi.namespace' 
      elements = 'a3FBA74B40343' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>MOF</XMI.any>
      </Model:Tag.values>
    </Model:Tag>
    <!-- ==================== Model.ModelElement    [Class] ==================== -->
    <Model:Class xmi.id = 'a3DB73D1D03C7' 
      name = 'ModelElement' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' >
    </Model:Class>
    <!-- ==================== Model.com.urep.jcr.transient=true    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.1202' 
      name = 'com.urep.jcr.transient=true' annotation = '' 
      tagId = 'com.urep.jcr.transient' 
      elements = 'a3DB73D1D03C7 a3DB6F54502A3' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>true</XMI.any>
      </Model:Tag.values>
    </Model:Tag>
    <!-- ==================== Model.Association    [Class] ==================== -->
    <Model:Class xmi.id = 'a3DB6F54502A3' 
      name = 'Association' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' >
    </Model:Class>
  </Model:Namespace.contents>
</Model:Package>
</XMI.content>
</XMI>

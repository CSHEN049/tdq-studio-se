// $ANTLR : "expectStringSuffix.g" -> "LexExpectStringSuffix.java"$

// This source file was generated by ANTLR. Do not edit manually!
package org.epic.core.parser;

import java.io.InputStream;
import antlr.TokenStreamException;
import antlr.TokenStreamIOException;
import antlr.TokenStreamRecognitionException;
import antlr.CharStreamException;
import antlr.CharStreamIOException;
import antlr.ANTLRException;
import java.io.Reader;
import java.util.Hashtable;
import antlr.CharScanner;
import antlr.InputBuffer;
import antlr.ByteBuffer;
import antlr.CharBuffer;
import antlr.Token;
import antlr.CommonToken;
import antlr.RecognitionException;
import antlr.NoViableAltForCharException;
import antlr.MismatchedCharException;
import antlr.TokenStream;
import antlr.ANTLRHashString;
import antlr.LexerSharedInputState;
import antlr.collections.impl.BitSet;
import antlr.SemanticException;

public class LexExpectStringSuffix extends org.epic.core.parser.LexerBase implements LexExpectStringSuffixTokenTypes, TokenStream
 {
public LexExpectStringSuffix(InputStream in) {
	this(new ByteBuffer(in));
}
public LexExpectStringSuffix(Reader in) {
	this(new CharBuffer(in));
}
public LexExpectStringSuffix(InputBuffer ib) {
	this(new LexerSharedInputState(ib));
}
public LexExpectStringSuffix(LexerSharedInputState state) {
	super(state);
	caseSensitiveLiterals = true;
	setCaseSensitive(true);
	literals = new Hashtable();
}

public Token nextToken() throws TokenStreamException {
	Token theRetToken=null;
tryAgain:
	for (;;) {
		Token _token = null;
		int _ttype = Token.INVALID_TYPE;
		resetText();
		try {   // for char stream error handling
			try {   // for lexical error handling
				{
					mSTRING_SUFFIX(true);
					theRetToken=_returnToken;
				}
				
				if ( _returnToken==null ) continue tryAgain; // found SKIP token
				_ttype = _returnToken.getType();
				_ttype = testLiteralsTable(_ttype);
				_returnToken.setType(_ttype);
				return _returnToken;
			}
			catch (RecognitionException e) {
				throw new TokenStreamRecognitionException(e);
			}
		}
		catch (CharStreamException cse) {
			if ( cse instanceof CharStreamIOException ) {
				throw new TokenStreamIOException(((CharStreamIOException)cse).io);
			}
			else {
				throw new TokenStreamException(cse.getMessage());
			}
		}
	}
}

	public final void mSTRING_SUFFIX(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = STRING_SUFFIX;
		int _saveIndex;
		
		{
		_loop227:
		do {
			switch ( LA(1)) {
			case 'g':
			{
				match('g');
				break;
			}
			case 'i':
			{
				match('i');
				break;
			}
			case 'm':
			{
				match('m');
				break;
			}
			case 'o':
			{
				match('o');
				break;
			}
			case 's':
			{
				match('s');
				break;
			}
			case 'x':
			{
				match('x');
				break;
			}
			default:
			{
				break _loop227;
			}
			}
		} while (true);
		}
		
				getParent().pop();
				if (new String(text.getBuffer(),_begin,text.length()-_begin).length() == 0) getParent().retry();
			
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	
	
	}

// $ANTLR : "perl.g" -> "PerlLexer.java"$

// This source file was generated by ANTLR. Do not edit manually!
package org.epic.core.parser;

import java.io.InputStream;
import antlr.TokenStreamException;
import antlr.TokenStreamIOException;
import antlr.TokenStreamRecognitionException;
import antlr.CharStreamException;
import antlr.CharStreamIOException;
import antlr.ANTLRException;
import java.io.Reader;
import java.util.Hashtable;
import antlr.CharScanner;
import antlr.InputBuffer;
import antlr.ByteBuffer;
import antlr.CharBuffer;
import antlr.Token;
import antlr.CommonToken;
import antlr.RecognitionException;
import antlr.NoViableAltForCharException;
import antlr.MismatchedCharException;
import antlr.TokenStream;
import antlr.ANTLRHashString;
import antlr.LexerSharedInputState;
import antlr.collections.impl.BitSet;
import antlr.SemanticException;

public class PerlLexer extends org.epic.core.parser.PerlLexerBase implements PerlTokenTypes, TokenStream
 {
public PerlLexer(InputStream in) {
	this(new ByteBuffer(in));
}
public PerlLexer(Reader in) {
	this(new CharBuffer(in));
}
public PerlLexer(InputBuffer ib) {
	this(new LexerSharedInputState(ib));
}
public PerlLexer(LexerSharedInputState state) {
	super(state);
	caseSensitiveLiterals = true;
	setCaseSensitive(true);
	literals = new Hashtable();
}

public Token nextToken() throws TokenStreamException {
	Token theRetToken=null;
tryAgain:
	for (;;) {
		Token _token = null;
		int _ttype = Token.INVALID_TYPE;
		resetText();
		try {   // for char stream error handling
			try {   // for lexical error handling
				if (((LA(1)=='=') && (_tokenSet_0.member(LA(2))) && ((LA(3) >= '\u0000' && LA(3) <= '\uffff')))&&( getColumn() == 1 )) {
					mOPEN_POD(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='#') && ((LA(2) >= '\u0000' && LA(2) <= '\uffff'))) {
					mCOMMENT(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='&') && (LA(2)=='&') && (true) && (true)) {
					mOPER_AND(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='|') && (LA(2)=='|')) {
					mOPER_OR(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='<') && (LA(2)=='=') && (true) && (true)) {
					mOPER_LTEQ(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='>') && (LA(2)=='=')) {
					mOPER_GTEQ(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='-') && (LA(2)=='s')) {
					mOPER_S(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='=') && (LA(2)=='>') && (true)) {
					mOPER_DARROW(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='-') && (LA(2)=='>')) {
					mOPER_ARROW(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='=') && (LA(2)=='=') && (true)) {
					mOPER_DOUBLEEQ(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='!') && (LA(2)=='=')) {
					mOPER_NOTEQ(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='=') && (LA(2)=='~') && (true)) {
					mOPER_EQMATCH(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='!') && (LA(2)=='~')) {
					mOPER_EQNOTMATCH(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='-') && (LA(2)=='-')) {
					mOPER_MINUSMINUS(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='-') && (LA(2)=='=')) {
					mOPER_MINUSEQ(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='+') && (LA(2)=='+')) {
					mOPER_PLUSPLUS(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='+') && (LA(2)=='=')) {
					mOPER_PLUSEQ(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='.') && (LA(2)=='.')) {
					mOPER_DOTDOT(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='&') && (_tokenSet_1.member(LA(2)))) {
					mPROC_REF(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='<') && (LA(2)=='<')) {
					mOPER_LSHIFT_OR_HEREDOC(true);
					theRetToken=_returnToken;
				}
				else if (((LA(1)=='<') && (_tokenSet_2.member(LA(2))) && (true) && (true))&&( glob )) {
					mGLOB(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='>') && (LA(2)=='>')) {
					mOPER_RSHIFT(true);
					theRetToken=_returnToken;
				}
				else if ((_tokenSet_3.member(LA(1))) && (true) && (true) && (true)) {
					mWS(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)==';') && (true) && (true) && (true)) {
					mSEMI(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='{') && (true) && (true) && (true)) {
					mOPEN_CURLY(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='}') && (true) && (true) && (true)) {
					mCLOSE_CURLY(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='`') && (true) && (true) && (true)) {
					mOPEN_BQUOTE(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='\'') && (true) && (true) && (true)) {
					mOPEN_SQUOTE(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='"') && (true) && (true) && (true)) {
					mOPEN_DQUOTE(true);
					theRetToken=_returnToken;
				}
				else if (((_tokenSet_4.member(LA(1))) && (true) && (true) && (true))&&( !proto )) {
					mMAYBE_SPECIAL_VAR(true);
					theRetToken=_returnToken;
				}
				else if (((_tokenSet_5.member(LA(1))) && (true) && (true) && (true))&&( proto )) {
					mPROTO(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='/') && (true) && (true) && (true)) {
					mOPEN_SLASH(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='?') && (true) && (true) && (true)) {
					mOPEN_QMARK(true);
					theRetToken=_returnToken;
				}
				else if ((_tokenSet_1.member(LA(1))) && (true) && (true) && (true)) {
					mSUBST_OR_MATCH_OR_WORD(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)==',') && (true) && (true) && (true)) {
					mOPER_COMMA(true);
					theRetToken=_returnToken;
				}
				else if (((LA(1)=='=') && (true) && (true) && (true))&&( !format )) {
					mOPER_EQ(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='/') && (true) && (true) && (true)) {
					mOPER_DIV(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='+') && (true) && (true) && (true)) {
					mOPER_PLUS(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='-') && (true) && (true) && (true)) {
					mOPER_MINUS(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='.') && (true) && (true) && (true)) {
					mOPER_DOT(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='\\') && (true) && (true) && (true)) {
					mOPER_BSLASH(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='(') && (true) && (true) && (true)) {
					mOPEN_PAREN(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)==')') && (true) && (true) && (true)) {
					mCLOSE_PAREN(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='[') && (true) && (true) && (true)) {
					mOPEN_BRACKET(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)==']') && (true) && (true) && (true)) {
					mCLOSE_BRACKET(true);
					theRetToken=_returnToken;
				}
				else if (((LA(1)=='=') && (true) && (true) && (true))&&( format )) {
					mFORMAT_STMT(true);
					theRetToken=_returnToken;
				}
				else if ((LA(1)=='>') && (true) && (true) && (true)) {
					mOPER_GT(true);
					theRetToken=_returnToken;
				}
				else if (((LA(1)=='<') && (true) && (true) && (true))&&( !glob )) {
					mOPER_LT(true);
					theRetToken=_returnToken;
				}
				else if (((LA(1) >= '\u0000' && LA(1) <= '\ufffe')) && (true) && (true) && (true)) {
					mOTHER(true);
					theRetToken=_returnToken;
				}
				else {
					if (LA(1)==EOF_CHAR) {uponEOF(); _returnToken = makeToken(Token.EOF_TYPE);}
				else {throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());}
				}
				
				if ( _returnToken==null ) continue tryAgain; // found SKIP token
				_ttype = _returnToken.getType();
				_ttype = testLiteralsTable(_ttype);
				_returnToken.setType(_ttype);
				return _returnToken;
			}
			catch (RecognitionException e) {
				throw new TokenStreamRecognitionException(e);
			}
		}
		catch (CharStreamException cse) {
			if ( cse instanceof CharStreamIOException ) {
				throw new TokenStreamIOException(((CharStreamIOException)cse).io);
			}
			else {
				throw new TokenStreamException(cse.getMessage());
			}
		}
	}
}

	public final void mWS(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = WS;
		int _saveIndex;
		
		{
		int _cnt18=0;
		_loop18:
		do {
			if ((LA(1)==' ') && (true) && (true) && (true)) {
				match(' ');
			}
			else if ((LA(1)=='\t') && (true) && (true) && (true)) {
				match('\t');
			}
			else if ((LA(1)=='\n'||LA(1)=='\r') && (true) && (true) && (true)) {
				mNEWLINE(false);
			}
			else {
				if ( _cnt18>=1 ) { break _loop18; } else {throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());}
			}
			
			_cnt18++;
		} while (true);
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	protected final void mNEWLINE(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = NEWLINE;
		int _saveIndex;
		
		{
		if ((LA(1)=='\r') && (LA(2)=='\n') && (true) && (true)) {
			match('\r');
			match('\n');
		}
		else if ((LA(1)=='\r') && (true) && (true) && (true)) {
			match('\r');
		}
		else if ((LA(1)=='\n')) {
			match('\n');
		}
		else {
			throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
		}
		
		}
		if ( inputState.guessing==0 ) {
			_ttype = Token.SKIP; newline();
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mCOMMENT(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = COMMENT;
		int _saveIndex;
		
		match('#');
		{
		_loop21:
		do {
			if ((_tokenSet_0.member(LA(1)))) {
				mNOT_NEWLINE(false);
			}
			else {
				break _loop21;
			}
			
		} while (true);
		}
		{
		switch ( LA(1)) {
		case '\n':  case '\r':
		{
			_saveIndex=text.length();
			mNEWLINE(false);
			text.setLength(_saveIndex);
			break;
		}
		case '\uffff':
		{
			_saveIndex=text.length();
			match('\uFFFF');
			text.setLength(_saveIndex);
			break;
		}
		default:
		{
			throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
		}
		}
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	protected final void mNOT_NEWLINE(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = NOT_NEWLINE;
		int _saveIndex;
		
		{
		match(_tokenSet_0);
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mSEMI(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = SEMI;
		int _saveIndex;
		
		match(';');
		if ( inputState.guessing==0 ) {
			
					format = glob = afterArrow = false;
					qmarkRegexp = slashRegexp = true;
					_token = createOperatorToken(PerlTokenTypes.SEMI, ";");
				
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPEN_CURLY(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPEN_CURLY;
		int _saveIndex;
		
		match('{');
		if ( inputState.guessing==0 ) {
			
					_token = createCurlyToken(PerlTokenTypes.OPEN_CURLY, "{"); pc++;
					proto = glob = afterSub = false;
					qmarkRegexp = slashRegexp = true;
				
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mCLOSE_CURLY(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = CLOSE_CURLY;
		int _saveIndex;
		
		match('}');
		if ( inputState.guessing==0 ) {
			
					pc--; _token = createCurlyToken(PerlTokenTypes.CLOSE_CURLY, "}");
					qmarkRegexp = slashRegexp = format = glob = false;
				
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPEN_BQUOTE(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPEN_BQUOTE;
		int _saveIndex;
		
		match('`');
		if ( inputState.guessing==0 ) {
			getParent().expectStringEnd('`');
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPEN_SQUOTE(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPEN_SQUOTE;
		int _saveIndex;
		
		match('\'');
		if ( inputState.guessing==0 ) {
				getParent().expectStringEnd('\'');
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPEN_DQUOTE(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPEN_DQUOTE;
		int _saveIndex;
		
		match('"');
		if ( inputState.guessing==0 ) {
			getParent().expectStringEnd('"');
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mMAYBE_SPECIAL_VAR(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = MAYBE_SPECIAL_VAR;
		int _saveIndex;
		
		if (!( !proto ))
		  throw new SemanticException(" !proto ");
		{
		boolean synPredMatched32 = false;
		if (((LA(1)=='*') && (LA(2)=='*') && (true) && (true))) {
			int _m32 = mark();
			synPredMatched32 = true;
			inputState.guessing++;
			try {
				{
				match("**");
				}
			}
			catch (RecognitionException pe) {
				synPredMatched32 = false;
			}
			rewind(_m32);
inputState.guessing--;
		}
		if ( synPredMatched32 ) {
			match("**");
			if ( inputState.guessing==0 ) {
				_token = createOperatorToken(PerlTokenTypes.OPER_MULMUL, "**");
			}
		}
		else {
			boolean synPredMatched34 = false;
			if (((LA(1)=='*') && (LA(2)=='=') && (true) && (true))) {
				int _m34 = mark();
				synPredMatched34 = true;
				inputState.guessing++;
				try {
					{
					match("*=");
					}
				}
				catch (RecognitionException pe) {
					synPredMatched34 = false;
				}
				rewind(_m34);
inputState.guessing--;
			}
			if ( synPredMatched34 ) {
				match("*=");
				if ( inputState.guessing==0 ) {
					_token = createOperatorToken(PerlTokenTypes.OPER_MULEQ, "*=");
				}
			}
			else {
				boolean synPredMatched36 = false;
				if (((LA(1)=='$'||LA(1)=='%'||LA(1)=='@') && (_tokenSet_6.member(LA(2))) && (true) && (true))) {
					int _m36 = mark();
					synPredMatched36 = true;
					inputState.guessing++;
					try {
						{
						mVAR(false);
						}
					}
					catch (RecognitionException pe) {
						synPredMatched36 = false;
					}
					rewind(_m36);
inputState.guessing--;
				}
				if ( synPredMatched36 ) {
					mVAR(false);
					if ( inputState.guessing==0 ) {
						_ttype = PerlTokenTypes.VAR;
					}
				}
				else {
					boolean synPredMatched38 = false;
					if (((_tokenSet_4.member(LA(1))) && (_tokenSet_7.member(LA(2))) && (true) && (true))) {
						int _m38 = mark();
						synPredMatched38 = true;
						inputState.guessing++;
						try {
							{
							mSPECIAL_VAR(false);
							}
						}
						catch (RecognitionException pe) {
							synPredMatched38 = false;
						}
						rewind(_m38);
inputState.guessing--;
					}
					if ( synPredMatched38 ) {
						mSPECIAL_VAR(false);
						if ( inputState.guessing==0 ) {
							_ttype = PerlTokenTypes.SPECIAL_VAR; glob = false;
						}
					}
					else {
						boolean synPredMatched42 = false;
						if (((LA(1)=='%') && (LA(2)=='=') && (true) && (true))) {
							int _m42 = mark();
							synPredMatched42 = true;
							inputState.guessing++;
							try {
								{
								match("%=");
								}
							}
							catch (RecognitionException pe) {
								synPredMatched42 = false;
							}
							rewind(_m42);
inputState.guessing--;
						}
						if ( synPredMatched42 ) {
							match("%=");
							if ( inputState.guessing==0 ) {
								_token = createOperatorToken(PerlTokenTypes.OPER_MODEQ, "%=");
							}
						}
						else {
							boolean synPredMatched40 = false;
							if (((LA(1)=='*') && (true))) {
								int _m40 = mark();
								synPredMatched40 = true;
								inputState.guessing++;
								try {
									{
									match('*');
									}
								}
								catch (RecognitionException pe) {
									synPredMatched40 = false;
								}
								rewind(_m40);
inputState.guessing--;
							}
							if ( synPredMatched40 ) {
								match('*');
								if ( inputState.guessing==0 ) {
									_token = createOperatorToken(PerlTokenTypes.OPER_MUL, "*");
								}
							}
							else {
								boolean synPredMatched44 = false;
								if (((LA(1)=='%') && (true) && (true) && (true))) {
									int _m44 = mark();
									synPredMatched44 = true;
									inputState.guessing++;
									try {
										{
										match('%');
										}
									}
									catch (RecognitionException pe) {
										synPredMatched44 = false;
									}
									rewind(_m44);
inputState.guessing--;
								}
								if ( synPredMatched44 ) {
									match('%');
									if ( inputState.guessing==0 ) {
										_token = createOperatorToken(PerlTokenTypes.OPER_MOD, "%");
									}
								}
								else {
									boolean synPredMatched46 = false;
									if (((LA(1)=='$'||LA(1)=='%'||LA(1)=='@') && (true) && (true) && (true))) {
										int _m46 = mark();
										synPredMatched46 = true;
										inputState.guessing++;
										try {
											{
											mVAR_START(false);
											}
										}
										catch (RecognitionException pe) {
											synPredMatched46 = false;
										}
										rewind(_m46);
inputState.guessing--;
									}
									if ( synPredMatched46 ) {
										mVAR_START(false);
										if ( inputState.guessing==0 ) {
											_ttype = PerlTokenTypes.VAR;
										}
									}
									else {
										throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
									}
									}}}}}}}
									}
									if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
										_token = makeToken(_ttype);
										_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
									}
									_returnToken = _token;
								}
								
	protected final void mVAR(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = VAR;
		int _saveIndex;
		
		if (!( !proto ))
		  throw new SemanticException(" !proto ");
		mVAR_START(false);
		{
		switch ( LA(1)) {
		case '0':  case '1':  case '2':  case '3':
		case '4':  case '5':  case '6':  case '7':
		case '8':  case '9':  case ':':  case 'A':
		case 'B':  case 'C':  case 'D':  case 'E':
		case 'F':  case 'G':  case 'H':  case 'I':
		case 'J':  case 'K':  case 'L':  case 'M':
		case 'N':  case 'O':  case 'P':  case 'Q':
		case 'R':  case 'S':  case 'T':  case 'U':
		case 'V':  case 'W':  case 'X':  case 'Y':
		case 'Z':  case '_':  case 'a':  case 'b':
		case 'c':  case 'd':  case 'e':  case 'f':
		case 'g':  case 'h':  case 'i':  case 'j':
		case 'k':  case 'l':  case 'm':  case 'n':
		case 'o':  case 'p':  case 'q':  case 'r':
		case 's':  case 't':  case 'u':  case 'v':
		case 'w':  case 'x':  case 'y':  case 'z':
		{
			mID(false);
			break;
		}
		case '{':
		{
			mCURLY(false);
			break;
		}
		case '@':
		{
			match('@');
			break;
		}
		case '\uffff':
		{
			_saveIndex=text.length();
			match('\uFFFF');
			text.setLength(_saveIndex);
			break;
		}
		default:
		{
			throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			glob = qmarkRegexp = slashRegexp = false;
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	protected final void mSPECIAL_VAR(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = SPECIAL_VAR;
		int _saveIndex;
		
		{
		if ((LA(1)=='*') && (LA(2)=='^') && (LA(3)=='A')) {
			match("*^A");
		}
		else if ((LA(1)=='*') && (LA(2)=='^') && (LA(3)=='C')) {
			match("*^C");
		}
		else if ((LA(1)=='*') && (LA(2)=='^') && (LA(3)=='D')) {
			match("*^D");
		}
		else if ((LA(1)=='*') && (LA(2)=='^') && (LA(3)=='E')) {
			match("*^E");
		}
		else if ((LA(1)=='*') && (LA(2)=='^') && (LA(3)=='F')) {
			match("*^F");
		}
		else if ((LA(1)=='*') && (LA(2)=='^') && (LA(3)=='I')) {
			match("*^I");
		}
		else if ((LA(1)=='*') && (LA(2)=='^') && (LA(3)=='L')) {
			match("*^L");
		}
		else if ((LA(1)=='*') && (LA(2)=='^') && (LA(3)=='N')) {
			match("*^N");
		}
		else if ((LA(1)=='*') && (LA(2)=='^') && (LA(3)=='O')) {
			match("*^O");
		}
		else if ((LA(1)=='*') && (LA(2)=='^') && (LA(3)=='P')) {
			match("*^P");
		}
		else if ((LA(1)=='*') && (LA(2)=='^') && (LA(3)=='R')) {
			match("*^R");
		}
		else if ((LA(1)=='*') && (LA(2)=='^') && (LA(3)=='S')) {
			match("*^S");
		}
		else if ((LA(1)=='*') && (LA(2)=='^') && (LA(3)=='T')) {
			match("*^T");
		}
		else if ((LA(1)=='*') && (LA(2)=='^') && (LA(3)=='V')) {
			match("*^V");
		}
		else if ((LA(1)=='*') && (LA(2)=='^') && (LA(3)=='W')) {
			match("*^W");
		}
		else if ((LA(1)=='*') && (LA(2)=='^') && (LA(3)=='X')) {
			match("*^X");
		}
		else if ((LA(1)=='$') && (LA(2)=='$') && (LA(3)=='m')) {
			match("$$m");
		}
		else if ((LA(1)=='$') && (LA(2)=='$') && (LA(3)=='s')) {
			match("$$s");
		}
		else if ((LA(1)=='$') && (LA(2)=='^') && (LA(3)=='A')) {
			match("$^A");
		}
		else if ((LA(1)=='$') && (LA(2)=='^') && (LA(3)=='C')) {
			match("$^C");
		}
		else if ((LA(1)=='$') && (LA(2)=='^') && (LA(3)=='D')) {
			match("$^D");
		}
		else if ((LA(1)=='$') && (LA(2)=='^') && (LA(3)=='E')) {
			match("$^E");
		}
		else if ((LA(1)=='$') && (LA(2)=='^') && (LA(3)=='F')) {
			match("$^F");
		}
		else if ((LA(1)=='$') && (LA(2)=='^') && (LA(3)=='H')) {
			match("$^H");
		}
		else if ((LA(1)=='$') && (LA(2)=='^') && (LA(3)=='I')) {
			match("$^I");
		}
		else if ((LA(1)=='$') && (LA(2)=='^') && (LA(3)=='L')) {
			match("$^L");
		}
		else if ((LA(1)=='$') && (LA(2)=='^') && (LA(3)=='M')) {
			match("$^M");
		}
		else if ((LA(1)=='$') && (LA(2)=='^') && (LA(3)=='N')) {
			match("$^N");
		}
		else if ((LA(1)=='$') && (LA(2)=='^') && (LA(3)=='O')) {
			match("$^O");
		}
		else if ((LA(1)=='$') && (LA(2)=='^') && (LA(3)=='P')) {
			match("$^P");
		}
		else if ((LA(1)=='$') && (LA(2)=='^') && (LA(3)=='R')) {
			match("$^R");
		}
		else if ((LA(1)=='$') && (LA(2)=='^') && (LA(3)=='S')) {
			match("$^S");
		}
		else if ((LA(1)=='$') && (LA(2)=='^') && (LA(3)=='T')) {
			match("$^T");
		}
		else if ((LA(1)=='$') && (LA(2)=='^') && (LA(3)=='V')) {
			match("$^V");
		}
		else if ((LA(1)=='$') && (LA(2)=='^') && (LA(3)=='W')) {
			match("$^W");
		}
		else if ((LA(1)=='$') && (LA(2)=='^') && (LA(3)=='X')) {
			match("$^X");
		}
		else if ((LA(1)=='*') && (LA(2)=='/')) {
			match("*/");
		}
		else if ((LA(1)=='*') && (LA(2)=='?')) {
			match("*?");
		}
		else if ((LA(1)=='*') && (LA(2)=='%')) {
			match("*%");
		}
		else if ((LA(1)=='*') && (LA(2)=='@')) {
			match("*@");
		}
		else if ((LA(1)=='*') && (LA(2)=='_')) {
			match("*_");
		}
		else if ((LA(1)=='*') && (LA(2)=='-')) {
			match("*-");
		}
		else if ((LA(1)=='*') && (LA(2)=='+')) {
			match("*+");
		}
		else if ((LA(1)=='*') && (LA(2)=='.')) {
			match("*.");
		}
		else if ((LA(1)=='*') && (LA(2)=='|')) {
			match("*|");
		}
		else if ((LA(1)=='*') && (LA(2)==',')) {
			match("*,");
		}
		else if ((LA(1)=='*') && (LA(2)==';')) {
			match("*;");
		}
		else if ((LA(1)=='*') && (LA(2)=='~')) {
			match("*~");
		}
		else if ((LA(1)=='*') && (LA(2)==':')) {
			match("*:");
		}
		else if ((LA(1)=='*') && (LA(2)=='^') && (true)) {
			match("*^");
		}
		else if ((LA(1)=='*') && (LA(2)=='<')) {
			match("*<");
		}
		else if ((LA(1)=='*') && (LA(2)=='>')) {
			match("*>");
		}
		else if ((LA(1)=='*') && (LA(2)=='(')) {
			match("*(");
		}
		else if ((LA(1)=='*') && (LA(2)==')')) {
			match("*)");
		}
		else if ((LA(1)=='*') && (LA(2)=='"')) {
			match("*\"");
		}
		else if ((LA(1)=='*') && (LA(2)=='\\')) {
			match("*\\");
		}
		else if ((LA(1)=='$') && (LA(2)=='/')) {
			match("$/");
		}
		else if ((LA(1)=='$') && (LA(2)=='?')) {
			match("$?");
		}
		else if ((LA(1)=='$') && (LA(2)=='%')) {
			match("$%");
		}
		else if ((LA(1)=='$') && (LA(2)=='@')) {
			match("$@");
		}
		else if ((LA(1)=='$') && (LA(2)=='_')) {
			match("$_");
		}
		else if ((LA(1)=='$') && (LA(2)=='-')) {
			match("$-");
		}
		else if ((LA(1)=='$') && (LA(2)=='+')) {
			match("$+");
		}
		else if ((LA(1)=='$') && (LA(2)=='.')) {
			match("$.");
		}
		else if ((LA(1)=='$') && (LA(2)=='|')) {
			match("$|");
		}
		else if ((LA(1)=='$') && (LA(2)=='!')) {
			match("$!");
		}
		else if ((LA(1)=='$') && (LA(2)==';')) {
			match("$;");
		}
		else if ((LA(1)=='$') && (LA(2)=='~')) {
			match("$~");
		}
		else if ((LA(1)=='$') && (LA(2)=='$') && (true)) {
			match("$$");
		}
		else if ((LA(1)=='$') && (LA(2)=='`')) {
			match("$`");
		}
		else if ((LA(1)=='$') && (LA(2)=='\'')) {
			match("$'");
		}
		else if ((LA(1)=='$') && (LA(2)=='<')) {
			match("$<");
		}
		else if ((LA(1)=='$') && (LA(2)=='>')) {
			match("$>");
		}
		else if ((LA(1)=='$') && (LA(2)=='(')) {
			match("$(");
		}
		else if ((LA(1)=='$') && (LA(2)==')')) {
			match("$)");
		}
		else if ((LA(1)=='$') && (LA(2)==',')) {
			match("$,");
		}
		else if ((LA(1)=='$') && (LA(2)=='[')) {
			match("$[");
		}
		else if ((LA(1)=='$') && (LA(2)==']')) {
			match("$]");
		}
		else if ((LA(1)=='$') && (LA(2)==':')) {
			match("$:");
		}
		else if ((LA(1)=='$') && (LA(2)=='*')) {
			match("$*");
		}
		else if ((LA(1)=='$') && (LA(2)=='#')) {
			match("$#");
		}
		else if ((LA(1)=='$') && (LA(2)=='=')) {
			match("$=");
		}
		else if ((LA(1)=='$') && (LA(2)=='^') && (true)) {
			match("$^");
		}
		else if ((LA(1)=='$') && (LA(2)=='&')) {
			match("$&");
		}
		else if ((LA(1)=='$') && (LA(2)=='"')) {
			match("$\"");
		}
		else if ((LA(1)=='$') && (LA(2)=='\\')) {
			match("$\\");
		}
		else if ((LA(1)=='@') && (LA(2)=='+')) {
			match("@+");
		}
		else if ((LA(1)=='@') && (LA(2)=='-')) {
			match("@-");
		}
		else if ((LA(1)=='@') && (LA(2)=='_')) {
			match("@_");
		}
		else if ((LA(1)=='@') && (LA(2)=='$')) {
			match("@$");
		}
		else if ((LA(1)=='%') && (LA(2)=='!')) {
			match("%!");
		}
		else if ((LA(1)=='%') && (LA(2)=='@')) {
			match("%@");
		}
		else if ((LA(1)=='%') && (LA(2)=='^')) {
			match("%^H");
		}
		else {
			throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
		}
		
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	protected final void mVAR_START(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = VAR_START;
		int _saveIndex;
		
		{
		switch ( LA(1)) {
		case '@':
		{
			match('@');
			break;
		}
		case '$':
		{
			match('$');
			break;
		}
		case '%':
		{
			match('%');
			break;
		}
		default:
		{
			throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
		}
		}
		}
		{
		_loop59:
		do {
			switch ( LA(1)) {
			case '$':
			{
				match('$');
				break;
			}
			case '%':
			{
				match('%');
				break;
			}
			case '*':
			{
				match('*');
				break;
			}
			case '#':
			{
				match('#');
				break;
			}
			default:
				if ((LA(1)=='@') && (true) && (true) && (true)) {
					match('@');
				}
			else {
				break _loop59;
			}
			}
		} while (true);
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	protected final void mOPER_MODEQ(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_MODEQ;
		int _saveIndex;
		
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	protected final void mOPER_MULEQ(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_MULEQ;
		int _saveIndex;
		
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	protected final void mOPER_MULMUL(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_MULMUL;
		int _saveIndex;
		
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	protected final void mOPER_MUL(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_MUL;
		int _saveIndex;
		
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	protected final void mOPER_MOD(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_MOD;
		int _saveIndex;
		
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	protected final void mID(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = ID;
		int _saveIndex;
		
		if ( inputState.guessing==0 ) {
			afterColon = false;
		}
		{
		int _cnt189=0;
		_loop189:
		do {
			if ((_tokenSet_1.member(LA(1)))) {
				if ( inputState.guessing==0 ) {
					
							// keep going if we have "::", break on ":"
							// there must be a better way to implement it X-(
							if (LA(1) == ':') 
							{
								if (!afterColon && LA(2) != ':') break;
								else afterColon = true;
							}
							else afterColon = false;
						
				}
				mWORD_CHAR(false);
			}
			else {
				if ( _cnt189>=1 ) { break _loop189; } else {throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());}
			}
			
			_cnt189++;
		} while (true);
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	protected final void mCURLY(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = CURLY;
		int _saveIndex;
		
		match('{');
		{
		_loop63:
		do {
			if ((LA(1)=='{') && ((LA(2) >= '\u0000' && LA(2) <= '\uffff')) && ((LA(3) >= '\u0000' && LA(3) <= '\uffff')) && (true)) {
				mCURLY(false);
			}
			else if ((LA(1)=='\n'||LA(1)=='\r') && ((LA(2) >= '\u0000' && LA(2) <= '\uffff')) && (true) && (true)) {
				mNEWLINE(false);
			}
			else if ((_tokenSet_8.member(LA(1))) && ((LA(2) >= '\u0000' && LA(2) <= '\uffff')) && (true) && (true)) {
				{
				match(_tokenSet_8);
				}
			}
			else {
				break _loop63;
			}
			
		} while (true);
		}
		{
		switch ( LA(1)) {
		case '}':
		{
			match('}');
			break;
		}
		case '\uffff':
		{
			_saveIndex=text.length();
			match('\uFFFF');
			text.setLength(_saveIndex);
			break;
		}
		default:
		{
			throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
		}
		}
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPER_AND(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_AND;
		int _saveIndex;
		
		match("&&");
		if ( inputState.guessing==0 ) {
			_token = createOperatorToken(PerlTokenTypes.OPER_AND, "&&");
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPER_OR(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_OR;
		int _saveIndex;
		
		match("||");
		if ( inputState.guessing==0 ) {
			_token = createOperatorToken(PerlTokenTypes.OPER_OR, "||");
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPER_LTEQ(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_LTEQ;
		int _saveIndex;
		
		match("<=");
		if ( inputState.guessing==0 ) {
			_token = createOperatorToken(PerlTokenTypes.OPER_LTEQ, "<=");
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPER_GTEQ(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_GTEQ;
		int _saveIndex;
		
		match(">=");
		if ( inputState.guessing==0 ) {
			_token = createOperatorToken(PerlTokenTypes.OPER_GTEQ, ">=");
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mPROTO(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = PROTO;
		int _saveIndex;
		
		if (!( proto ))
		  throw new SemanticException(" proto ");
		{
		int _cnt71=0;
		_loop71:
		do {
			switch ( LA(1)) {
			case '$':
			{
				match('$');
				break;
			}
			case '@':
			{
				match('@');
				break;
			}
			case '%':
			{
				match('%');
				break;
			}
			case '*':
			{
				match('*');
				break;
			}
			case ';':
			{
				match(';');
				break;
			}
			case '\\':
			{
				match('\\');
				break;
			}
			case '&':
			{
				match('&');
				break;
			}
			case '\t':  case '\n':  case '\r':  case ' ':
			{
				mWS(false);
				break;
			}
			default:
			{
				if ( _cnt71>=1 ) { break _loop71; } else {throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());}
			}
			}
			_cnt71++;
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			proto = false;
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPER_S(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_S;
		int _saveIndex;
		
		match("-s");
		if ( inputState.guessing==0 ) {
			_token = createOperatorToken(PerlTokenTypes.OPER_S, "-s");
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPEN_SLASH(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPEN_SLASH;
		int _saveIndex;
		
		match('/');
		if ( inputState.guessing==0 ) {
			
					if (slashRegexp)
					{
					getParent().expectStringSuffix(); // second
					getParent().expectStringEnd('/'); // first
					slashRegexp = qmarkRegexp = false;
					}
					else
					{
						_token = createOperatorToken(PerlTokenTypes.OPER_DIV, "/");
					}
				
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	protected final void mOPER_QMARK(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_QMARK;
		int _saveIndex;
		
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPEN_QMARK(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPEN_QMARK;
		int _saveIndex;
		
		match('?');
		if ( inputState.guessing==0 ) {
			
					if (qmarkRegexp)
					{
					getParent().expectStringSuffix(); // second
					getParent().expectStringEnd('?'); // first
					slashRegexp = qmarkRegexp = false;
					}
					else
					{
						_token = createOperatorToken(PerlTokenTypes.OPER_QMARK, "?");
					}
				
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mSUBST_OR_MATCH_OR_WORD(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = SUBST_OR_MATCH_OR_WORD;
		int _saveIndex;
		Token t1=null;
		Token n=null;
		Token t3=null;
		
		boolean synPredMatched83 = false;
		if ((((_tokenSet_1.member(LA(1))) && (true) && (true) && (true))&&( !afterArrow ))) {
			int _m83 = mark();
			synPredMatched83 = true;
			inputState.guessing++;
			try {
				{
				{
				switch ( LA(1)) {
				case 'm':  case 'q':  case 's':  case 't':
				case 'y':
				{
					mSUBST_OR_MATCH_OPER(false);
					break;
				}
				case 'x':
				{
					match('x');
					break;
				}
				default:
				{
					throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
				}
				}
				}
				{
				switch ( LA(1)) {
				case '0':  case '1':  case '2':  case '3':
				case '4':  case '5':  case '6':  case '7':
				case '8':  case '9':  case ':':  case 'A':
				case 'B':  case 'C':  case 'D':  case 'E':
				case 'F':  case 'G':  case 'H':  case 'I':
				case 'J':  case 'K':  case 'L':  case 'M':
				case 'N':  case 'O':  case 'P':  case 'Q':
				case 'R':  case 'S':  case 'T':  case 'U':
				case 'V':  case 'W':  case 'X':  case 'Y':
				case 'Z':  case '_':  case 'a':  case 'b':
				case 'c':  case 'd':  case 'e':  case 'f':
				case 'g':  case 'h':  case 'i':  case 'j':
				case 'k':  case 'l':  case 'm':  case 'n':
				case 'o':  case 'p':  case 'q':  case 'r':
				case 's':  case 't':  case 'u':  case 'v':
				case 'w':  case 'x':  case 'y':  case 'z':
				{
					mWORD_CHAR(false);
					break;
				}
				case '\t':  case '\n':  case '\r':  case ' ':
				case '=':
				{
					{
					{
					_loop82:
					do {
						if ((_tokenSet_3.member(LA(1)))) {
							mWS_CHAR(false);
						}
						else {
							break _loop82;
						}
						
					} while (true);
					}
					match("=>");
					}
					break;
				}
				default:
				{
					throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
				}
				}
				}
				}
			}
			catch (RecognitionException pe) {
				synPredMatched83 = false;
			}
			rewind(_m83);
inputState.guessing--;
		}
		if ( synPredMatched83 ) {
			if ( inputState.guessing==0 ) {
				notOper = true;
			}
			mWORD(true);
			t1=_returnToken;
			if ( inputState.guessing==0 ) {
				_token = t1;
			}
		}
		else {
			boolean synPredMatched85 = false;
			if ((((LA(1)=='s'||LA(1)=='t'||LA(1)=='y') && (true) && (true) && (true))&&( !afterArrow ))) {
				int _m85 = mark();
				synPredMatched85 = true;
				inputState.guessing++;
				try {
					{
					switch ( LA(1)) {
					case 't':
					{
						match("tr");
						break;
					}
					case 's':
					{
						match('s');
						break;
					}
					case 'y':
					{
						match('y');
						break;
					}
					default:
					{
						throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
					}
					}
					}
				}
				catch (RecognitionException pe) {
					synPredMatched85 = false;
				}
				rewind(_m85);
inputState.guessing--;
			}
			if ( synPredMatched85 ) {
				mSUBST_EXPR(false);
				if ( inputState.guessing==0 ) {
					_ttype = PerlTokenTypes.SUBST_EXPR;
				}
			}
			else {
				boolean synPredMatched89 = false;
				if ((((LA(1)=='m'||LA(1)=='q') && (true) && (true) && (true))&&( !afterArrow ))) {
					int _m89 = mark();
					synPredMatched89 = true;
					inputState.guessing++;
					try {
						{
						{
						if ((LA(1)=='q') && (LA(2)=='q')) {
							match("qq");
						}
						else if ((LA(1)=='q') && (LA(2)=='x')) {
							match("qx");
						}
						else if ((LA(1)=='q') && (LA(2)=='w')) {
							match("qw");
						}
						else if ((LA(1)=='q') && (LA(2)=='r')) {
							match("qr");
						}
						else if ((LA(1)=='q') && (_tokenSet_9.member(LA(2)))) {
							match('q');
						}
						else if ((LA(1)=='m')) {
							match('m');
						}
						else {
							throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
						}
						
						}
						{
						match(_tokenSet_9);
						}
						}
					}
					catch (RecognitionException pe) {
						synPredMatched89 = false;
					}
					rewind(_m89);
inputState.guessing--;
				}
				if ( synPredMatched89 ) {
					mMATCH_EXPR(false);
					if ( inputState.guessing==0 ) {
						_ttype = PerlTokenTypes.MATCH_EXPR;
					}
				}
				else {
					boolean synPredMatched91 = false;
					if ((((LA(1) >= '0' && LA(1) <= '9')) && (true) && (true) && (true))) {
						int _m91 = mark();
						synPredMatched91 = true;
						inputState.guessing++;
						try {
							{
							mNUMBER(false);
							}
						}
						catch (RecognitionException pe) {
							synPredMatched91 = false;
						}
						rewind(_m91);
inputState.guessing--;
					}
					if ( synPredMatched91 ) {
						mNUMBER(true);
						n=_returnToken;
						if ( inputState.guessing==0 ) {
							_token = n;
						}
					}
					else {
						boolean synPredMatched94 = false;
						if (((LA(1)==':') && (true) && (true) && (true))) {
							int _m94 = mark();
							synPredMatched94 = true;
							inputState.guessing++;
							try {
								{
								match(':');
								{
								if ((LA(1)=='\uffff')) {
									_saveIndex=text.length();
									match('\uFFFF');
									text.setLength(_saveIndex);
								}
								else if ((_tokenSet_10.member(LA(1)))) {
									matchNot(':');
								}
								else {
									throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
								}
								
								}
								}
							}
							catch (RecognitionException pe) {
								synPredMatched94 = false;
							}
							rewind(_m94);
inputState.guessing--;
						}
						if ( synPredMatched94 ) {
							match(':');
							if ( inputState.guessing==0 ) {
								
										glob = false;
										_token = createOperatorToken(PerlTokenTypes.OPER_COLON, ":");
									
							}
						}
						else if ((_tokenSet_1.member(LA(1))) && (true) && (true) && (true)) {
							mWORD(true);
							t3=_returnToken;
							if ( inputState.guessing==0 ) {
								_token = t3;
							}
						}
						else {
							throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
						}
						}}}}
						if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
							_token = makeToken(_ttype);
							_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
						}
						_returnToken = _token;
					}
					
	protected final void mSUBST_OR_MATCH_OPER(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = SUBST_OR_MATCH_OPER;
		int _saveIndex;
		
		{
		switch ( LA(1)) {
		case 't':
		{
			match("tr");
			break;
		}
		case 's':
		{
			match('s');
			break;
		}
		case 'y':
		{
			match('y');
			break;
		}
		case 'm':
		{
			match('m');
			break;
		}
		default:
			if ((LA(1)=='q') && (LA(2)=='q')) {
				match("qq");
			}
			else if ((LA(1)=='q') && (LA(2)=='x')) {
				match("qx");
			}
			else if ((LA(1)=='q') && (LA(2)=='w')) {
				match("qw");
			}
			else if ((LA(1)=='q') && (LA(2)=='r')) {
				match("qr");
			}
			else if ((LA(1)=='q') && (true)) {
				match('q');
			}
		else {
			throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
		}
		}
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	protected final void mWORD_CHAR(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = WORD_CHAR;
		int _saveIndex;
		
		{
		switch ( LA(1)) {
		case 'A':  case 'B':  case 'C':  case 'D':
		case 'E':  case 'F':  case 'G':  case 'H':
		case 'I':  case 'J':  case 'K':  case 'L':
		case 'M':  case 'N':  case 'O':  case 'P':
		case 'Q':  case 'R':  case 'S':  case 'T':
		case 'U':  case 'V':  case 'W':  case 'X':
		case 'Y':  case 'Z':
		{
			matchRange('A','Z');
			break;
		}
		case 'a':  case 'b':  case 'c':  case 'd':
		case 'e':  case 'f':  case 'g':  case 'h':
		case 'i':  case 'j':  case 'k':  case 'l':
		case 'm':  case 'n':  case 'o':  case 'p':
		case 'q':  case 'r':  case 's':  case 't':
		case 'u':  case 'v':  case 'w':  case 'x':
		case 'y':  case 'z':
		{
			matchRange('a','z');
			break;
		}
		case '0':  case '1':  case '2':  case '3':
		case '4':  case '5':  case '6':  case '7':
		case '8':  case '9':
		{
			matchRange('0','9');
			break;
		}
		case '_':
		{
			match('_');
			break;
		}
		case ':':
		{
			match(':');
			break;
		}
		default:
		{
			throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
		}
		}
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	protected final void mWS_CHAR(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = WS_CHAR;
		int _saveIndex;
		
		{
		switch ( LA(1)) {
		case ' ':
		{
			match(' ');
			break;
		}
		case '\t':
		{
			match('\t');
			break;
		}
		case '\n':
		{
			match('\n');
			break;
		}
		case '\r':
		{
			match('\r');
			break;
		}
		default:
		{
			throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
		}
		}
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	protected final void mWORD(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = WORD;
		int _saveIndex;
		
		mID(false);
		if ( inputState.guessing==0 ) {
			
					String str = new String(text.getBuffer(),_begin,text.length()-_begin);
					
					if ("use".equals(str)) _ttype = PerlTokenTypes.KEYWORD_USE;
					else if ("sub".equals(str)) { afterSub = proto = true; _ttype = PerlTokenTypes.KEYWORD_SUB; }
					else if ("package".equals(str)) { _ttype = PerlTokenTypes.KEYWORD_PACKAGE; }
					else if ("format".equals(str) && !afterSub) { format = true; _ttype = PerlTokenTypes.KEYWORD_FORMAT; }
					else if ("__END__".equals(str)) { _ttype = Token.EOF_TYPE; }
					else if ("__DATA__".equals(str)) { _ttype = Token.EOF_TYPE; }
					else if (!afterSub)
					{
						if (KEYWORDS1.contains(str))
					{
						if ("while".equals(str)) glob = true;
						_ttype = PerlTokenTypes.KEYWORD1;
					}
					else if (KEYWORDS2.contains(str))
					{
						glob = str.equals("unlink");
						_ttype = PerlTokenTypes.KEYWORD2;
					}
					else if (OPERATORS.contains(str) && !afterArrow && !notOper)
					{
						glob = false;
						_token = createOperatorToken(PerlTokenTypes.OPER_OTHER, str);
					}
					}
					else glob = false;
					
					slashRegexp = !afterArrow;
					qmarkRegexp = afterArrow = notOper = false;
				
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	protected final void mSUBST_EXPR(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = SUBST_EXPR;
		int _saveIndex;
		
		{
		switch ( LA(1)) {
		case 't':
		{
			match("tr");
			break;
		}
		case 's':
		{
			match('s');
			break;
		}
		case 'y':
		{
			match('y');
			break;
		}
		default:
		{
			throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			
					getParent().expectSubstExpr();
					slashRegexp = qmarkRegexp = false;
				
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	protected final void mMATCH_EXPR(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = MATCH_EXPR;
		int _saveIndex;
		
		{
		if ((LA(1)=='q') && (LA(2)=='q')) {
			match("qq");
		}
		else if ((LA(1)=='q') && (LA(2)=='x')) {
			match("qx");
		}
		else if ((LA(1)=='q') && (LA(2)=='w')) {
			match("qw");
		}
		else if ((LA(1)=='q') && (LA(2)=='r')) {
			match("qr");
		}
		else if ((LA(1)=='m')) {
			match('m');
		}
		else if ((LA(1)=='q') && (true)) {
			match('q');
		}
		else {
			throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
		}
		
		}
		if ( inputState.guessing==0 ) {
			
					getParent().expectStringSuffix(); // second
					getParent().expectString(); // first
					slashRegexp = qmarkRegexp = false;
				
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	protected final void mNUMBER(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = NUMBER;
		int _saveIndex;
		
		if ((LA(1)=='0') && (LA(2)=='x')) {
			{
			match("0x");
			{
			switch ( LA(1)) {
			case '0':  case '1':  case '2':  case '3':
			case '4':  case '5':  case '6':  case '7':
			case '8':  case '9':
			{
				matchRange('0','9');
				break;
			}
			case 'A':  case 'B':  case 'C':  case 'D':
			case 'E':  case 'F':
			{
				matchRange('A','F');
				break;
			}
			case 'a':  case 'b':  case 'c':  case 'd':
			case 'e':  case 'f':
			{
				matchRange('a','f');
				break;
			}
			default:
			{
				throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
			}
			}
			}
			}
		}
		else if (((LA(1) >= '0' && LA(1) <= '9')) && (true)) {
			{
			int _cnt185=0;
			_loop185:
			do {
				if (((LA(1) >= '0' && LA(1) <= '9'))) {
					matchRange('0','9');
				}
				else {
					if ( _cnt185>=1 ) { break _loop185; } else {throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());}
				}
				
				_cnt185++;
			} while (true);
			}
			if ( inputState.guessing==0 ) {
				
						slashRegexp = qmarkRegexp = glob = afterArrow = false;
						_ttype = PerlTokenTypes.NUMBER;
					
			}
		}
		else {
			throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
		}
		
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPER_DARROW(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_DARROW;
		int _saveIndex;
		
		match("=>");
		if ( inputState.guessing==0 ) {
			_token = createOperatorToken(PerlTokenTypes.OPER_DARROW, "=>");
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPER_ARROW(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_ARROW;
		int _saveIndex;
		
		match("->");
		if ( inputState.guessing==0 ) {
			
					_token = createOperatorToken(PerlTokenTypes.OPER_ARROW, "->");
					qmarkRegexp = slashRegexp = false;
					afterArrow = true;
				
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPER_DOUBLEEQ(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_DOUBLEEQ;
		int _saveIndex;
		
		match("==");
		if ( inputState.guessing==0 ) {
			_token = createOperatorToken(PerlTokenTypes.OPER_DOUBLEEQ, "==");
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPER_NOTEQ(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_NOTEQ;
		int _saveIndex;
		
		match("!=");
		if ( inputState.guessing==0 ) {
			_token = createOperatorToken(PerlTokenTypes.OPER_NOTEQ, "!=");
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPER_EQMATCH(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_EQMATCH;
		int _saveIndex;
		
		match("=~");
		if ( inputState.guessing==0 ) {
			afterArrow = false; _token = createOperatorToken(PerlTokenTypes.OPER_EQMATCH, "=~");
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPER_EQNOTMATCH(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_EQNOTMATCH;
		int _saveIndex;
		
		match("!~");
		if ( inputState.guessing==0 ) {
			_token = createOperatorToken(PerlTokenTypes.OPER_EQNOTMATCH, "!~");
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPER_MINUSMINUS(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_MINUSMINUS;
		int _saveIndex;
		
		match("--");
		if ( inputState.guessing==0 ) {
			
					_token = createOperatorToken(PerlTokenTypes.OPER_MINUSMINUS, "--");
					qmarkRegexp = false;
				
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPER_MINUSEQ(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_MINUSEQ;
		int _saveIndex;
		
		match("-=");
		if ( inputState.guessing==0 ) {
			
					_token = createOperatorToken(PerlTokenTypes.OPER_PLUSPLUS, "-=");
					qmarkRegexp = false;
				
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPER_PLUSPLUS(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_PLUSPLUS;
		int _saveIndex;
		
		match("++");
		if ( inputState.guessing==0 ) {
			
					_token = createOperatorToken(PerlTokenTypes.OPER_PLUSPLUS, "++");
					qmarkRegexp = false;
				
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPER_PLUSEQ(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_PLUSEQ;
		int _saveIndex;
		
		match("+=");
		if ( inputState.guessing==0 ) {
			
					_token = createOperatorToken(PerlTokenTypes.OPER_PLUSPLUS, "+=");
					qmarkRegexp = false;
				
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPER_COMMA(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_COMMA;
		int _saveIndex;
		
		match(',');
		if ( inputState.guessing==0 ) {
			_token = createOperatorToken(PerlTokenTypes.OPER_COMMA, ",");
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPER_EQ(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_EQ;
		int _saveIndex;
		
		if (!( !format ))
		  throw new SemanticException(" !format ");
		match('=');
		if ( inputState.guessing==0 ) {
			
					_token = createOperatorToken(PerlTokenTypes.OPER_EQ, "=");
					glob = true;
				
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPER_DIV(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_DIV;
		int _saveIndex;
		
		match('/');
		if ( inputState.guessing==0 ) {
			_token = createOperatorToken(PerlTokenTypes.OPER_DIV, "/");
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPER_PLUS(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_PLUS;
		int _saveIndex;
		
		match('+');
		if ( inputState.guessing==0 ) {
			_token = createOperatorToken(PerlTokenTypes.OPER_PLUS, "+");
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPER_MINUS(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_MINUS;
		int _saveIndex;
		
		match('-');
		if ( inputState.guessing==0 ) {
			_token = createOperatorToken(PerlTokenTypes.OPER_MINUS, "-");
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPER_DOTDOT(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_DOTDOT;
		int _saveIndex;
		
		match("..");
		if ( inputState.guessing==0 ) {
			_token = createOperatorToken(PerlTokenTypes.OPER_DOTDOT, "..");
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPER_DOT(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_DOT;
		int _saveIndex;
		
		match('.');
		if ( inputState.guessing==0 ) {
			afterArrow = false; _token = createOperatorToken(PerlTokenTypes.OPER_DOT, ".");
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPER_BSLASH(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_BSLASH;
		int _saveIndex;
		
		match('\\');
		if ( inputState.guessing==0 ) {
			_token = createOperatorToken(PerlTokenTypes.OPER_BSLASH, "\\");
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPEN_PAREN(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPEN_PAREN;
		int _saveIndex;
		
		match('(');
		if ( inputState.guessing==0 ) {
			
					_token = createOperatorToken(PerlTokenTypes.OPEN_PAREN, "(");
					format = false;
					glob = qmarkRegexp = slashRegexp = true;
				
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mCLOSE_PAREN(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = CLOSE_PAREN;
		int _saveIndex;
		
		match(')');
		if ( inputState.guessing==0 ) {
			
					_token = createOperatorToken(PerlTokenTypes.CLOSE_PAREN, ")");
					glob = qmarkRegexp = slashRegexp = false;
				
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPEN_BRACKET(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPEN_BRACKET;
		int _saveIndex;
		
		match('[');
		if ( inputState.guessing==0 ) {
			
					_token = createOperatorToken(PerlTokenTypes.OPEN_BRACKET, "[");
					format = false;
					glob = qmarkRegexp = slashRegexp = true;
				
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mCLOSE_BRACKET(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = CLOSE_BRACKET;
		int _saveIndex;
		
		match(']');
		if ( inputState.guessing==0 ) {
			
					_token = createOperatorToken(PerlTokenTypes.CLOSE_BRACKET, "]");
					glob = qmarkRegexp = slashRegexp = false;
				
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mFORMAT_STMT(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = FORMAT_STMT;
		int _saveIndex;
		
		if (!( format ))
		  throw new SemanticException(" format ");
		match("=");
		if ( inputState.guessing==0 ) {
			
					format = false;
					getParent().expectFormatEnd();
				
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	protected final void mVAR_WITH_CURLY(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = VAR_WITH_CURLY;
		int _saveIndex;
		
		boolean synPredMatched125 = false;
		if (((LA(1)=='$'||LA(1)=='%'||LA(1)=='@') && (_tokenSet_6.member(LA(2))) && (true) && (true))) {
			int _m125 = mark();
			synPredMatched125 = true;
			inputState.guessing++;
			try {
				{
				mVAR(false);
				{
				switch ( LA(1)) {
				case '\t':  case '\n':  case '\r':  case ' ':
				{
					mWS(false);
					break;
				}
				case '{':
				{
					break;
				}
				default:
				{
					throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
				}
				}
				}
				match('{');
				}
			}
			catch (RecognitionException pe) {
				synPredMatched125 = false;
			}
			rewind(_m125);
inputState.guessing--;
		}
		if ( synPredMatched125 ) {
			mVAR(false);
			{
			if ((_tokenSet_3.member(LA(1)))) {
				mWS(false);
			}
			else {
			}
			
			}
			if ( inputState.guessing==0 ) {
				getParent().expectString();
			}
		}
		else {
			boolean synPredMatched128 = false;
			if (((LA(1)=='$'||LA(1)=='%'||LA(1)=='@') && (_tokenSet_6.member(LA(2))) && (true) && (true))) {
				int _m128 = mark();
				synPredMatched128 = true;
				inputState.guessing++;
				try {
					{
					mVAR(false);
					}
				}
				catch (RecognitionException pe) {
					synPredMatched128 = false;
				}
				rewind(_m128);
inputState.guessing--;
			}
			if ( synPredMatched128 ) {
				mVAR(false);
			}
			else {
				throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
			}
			}
			if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
				_token = makeToken(_ttype);
				_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
			}
			_returnToken = _token;
		}
		
	public final void mPROC_REF(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = PROC_REF;
		int _saveIndex;
		
		match('&');
		mID(false);
		if ( inputState.guessing==0 ) {
			qmarkRegexp = slashRegexp = false;
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPER_LSHIFT_OR_HEREDOC(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_LSHIFT_OR_HEREDOC;
		int _saveIndex;
		
		boolean synPredMatched132 = false;
		if (((LA(1)=='<') && (LA(2)=='<') && (_tokenSet_11.member(LA(3))))) {
			int _m132 = mark();
			synPredMatched132 = true;
			inputState.guessing++;
			try {
				{
				mOPEN_HEREDOC(false);
				}
			}
			catch (RecognitionException pe) {
				synPredMatched132 = false;
			}
			rewind(_m132);
inputState.guessing--;
		}
		if ( synPredMatched132 ) {
			mOPEN_HEREDOC(false);
			if ( inputState.guessing==0 ) {
				_ttype = PerlTokenTypes.OPEN_HEREDOC;
			}
		}
		else {
			boolean synPredMatched136 = false;
			if (((LA(1)=='<') && (LA(2)=='<') && (true))) {
				int _m136 = mark();
				synPredMatched136 = true;
				inputState.guessing++;
				try {
					{
					match("<<");
					{
					if ((_tokenSet_3.member(LA(1))) && (_tokenSet_12.member(LA(2)))) {
						mWS(false);
					}
					else if ((_tokenSet_12.member(LA(1))) && (true)) {
					}
					else {
						throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
					}
					
					}
					{
					match(_tokenSet_12);
					}
					}
				}
				catch (RecognitionException pe) {
					synPredMatched136 = false;
				}
				rewind(_m136);
inputState.guessing--;
			}
			if ( synPredMatched136 ) {
				mOPER_LSHIFT(false);
				if ( inputState.guessing==0 ) {
					_token = createOperatorToken(PerlTokenTypes.OPER_LSHIFT, "<<");
				}
			}
			else {
				throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
			}
			}
			if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
				_token = makeToken(_ttype);
				_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
			}
			_returnToken = _token;
		}
		
	protected final void mOPEN_HEREDOC(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPEN_HEREDOC;
		int _saveIndex;
		
		{
		boolean synPredMatched142 = false;
		if (((LA(1)=='<') && (LA(2)=='<') && (_tokenSet_13.member(LA(3))) && ((LA(4) >= '\u0000' && LA(4) <= '\uffff')))) {
			int _m142 = mark();
			synPredMatched142 = true;
			inputState.guessing++;
			try {
				{
				match("<<");
				{
				switch ( LA(1)) {
				case '\t':  case '\n':  case '\r':  case ' ':
				{
					mWS(false);
					break;
				}
				case '"':
				{
					break;
				}
				default:
				{
					throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
				}
				}
				}
				match('"');
				}
			}
			catch (RecognitionException pe) {
				synPredMatched142 = false;
			}
			rewind(_m142);
inputState.guessing--;
		}
		if ( synPredMatched142 ) {
			match("<<");
			{
			switch ( LA(1)) {
			case '\t':  case '\n':  case '\r':  case ' ':
			{
				_saveIndex=text.length();
				mWS(false);
				text.setLength(_saveIndex);
				break;
			}
			case '"':
			{
				break;
			}
			default:
			{
				throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
			}
			}
			}
			_saveIndex=text.length();
			match('"');
			text.setLength(_saveIndex);
			{
			_loop146:
			do {
				if ((LA(1)=='\\') && (LA(2)=='"') && ((LA(3) >= '\u0000' && LA(3) <= '\uffff')) && (true)) {
					match("\\\"");
				}
				else if ((_tokenSet_14.member(LA(1))) && ((LA(2) >= '\u0000' && LA(2) <= '\uffff')) && (true) && (true)) {
					{
					match(_tokenSet_14);
					}
				}
				else {
					break _loop146;
				}
				
			} while (true);
			}
		}
		else {
			boolean synPredMatched149 = false;
			if (((LA(1)=='<') && (LA(2)=='<') && (_tokenSet_15.member(LA(3))) && ((LA(4) >= '\u0000' && LA(4) <= '\uffff')))) {
				int _m149 = mark();
				synPredMatched149 = true;
				inputState.guessing++;
				try {
					{
					match("<<");
					{
					switch ( LA(1)) {
					case '\t':  case '\n':  case '\r':  case ' ':
					{
						mWS(false);
						break;
					}
					case '\'':
					{
						break;
					}
					default:
					{
						throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
					}
					}
					}
					match("'");
					}
				}
				catch (RecognitionException pe) {
					synPredMatched149 = false;
				}
				rewind(_m149);
inputState.guessing--;
			}
			if ( synPredMatched149 ) {
				match("<<");
				{
				switch ( LA(1)) {
				case '\t':  case '\n':  case '\r':  case ' ':
				{
					_saveIndex=text.length();
					mWS(false);
					text.setLength(_saveIndex);
					break;
				}
				case '\'':
				{
					break;
				}
				default:
				{
					throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
				}
				}
				}
				_saveIndex=text.length();
				match("'");
				text.setLength(_saveIndex);
				{
				_loop153:
				do {
					if ((LA(1)=='\\') && (LA(2)=='\'') && ((LA(3) >= '\u0000' && LA(3) <= '\uffff')) && (true)) {
						match("\\'");
					}
					else if ((_tokenSet_16.member(LA(1))) && ((LA(2) >= '\u0000' && LA(2) <= '\uffff')) && (true) && (true)) {
						{
						match(_tokenSet_16);
						}
					}
					else {
						break _loop153;
					}
					
				} while (true);
				}
			}
			else {
				boolean synPredMatched156 = false;
				if (((LA(1)=='<') && (LA(2)=='<') && (_tokenSet_17.member(LA(3))) && ((LA(4) >= '\u0000' && LA(4) <= '\uffff')))) {
					int _m156 = mark();
					synPredMatched156 = true;
					inputState.guessing++;
					try {
						{
						match("<<");
						{
						switch ( LA(1)) {
						case '\t':  case '\n':  case '\r':  case ' ':
						{
							mWS(false);
							break;
						}
						case '`':
						{
							break;
						}
						default:
						{
							throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
						}
						}
						}
						match('`');
						}
					}
					catch (RecognitionException pe) {
						synPredMatched156 = false;
					}
					rewind(_m156);
inputState.guessing--;
				}
				if ( synPredMatched156 ) {
					match("<<");
					{
					switch ( LA(1)) {
					case '\t':  case '\n':  case '\r':  case ' ':
					{
						_saveIndex=text.length();
						mWS(false);
						text.setLength(_saveIndex);
						break;
					}
					case '`':
					{
						break;
					}
					default:
					{
						throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
					}
					}
					}
					_saveIndex=text.length();
					match('`');
					text.setLength(_saveIndex);
					{
					_loop160:
					do {
						if ((LA(1)=='\\') && (LA(2)=='`') && ((LA(3) >= '\u0000' && LA(3) <= '\uffff')) && (true)) {
							match("\\`");
						}
						else if ((_tokenSet_18.member(LA(1))) && ((LA(2) >= '\u0000' && LA(2) <= '\uffff')) && (true) && (true)) {
							{
							match(_tokenSet_18);
							}
						}
						else {
							break _loop160;
						}
						
					} while (true);
					}
				}
				else {
					boolean synPredMatched163 = false;
					if (((LA(1)=='<') && (LA(2)=='<') && (_tokenSet_1.member(LA(3))))) {
						int _m163 = mark();
						synPredMatched163 = true;
						inputState.guessing++;
						try {
							{
							match("<<");
							{
							switch ( LA(1)) {
							case '\t':  case '\n':  case '\r':  case ' ':
							{
								mWS(false);
								break;
							}
							case '0':  case '1':  case '2':  case '3':
							case '4':  case '5':  case '6':  case '7':
							case '8':  case '9':  case ':':  case 'A':
							case 'B':  case 'C':  case 'D':  case 'E':
							case 'F':  case 'G':  case 'H':  case 'I':
							case 'J':  case 'K':  case 'L':  case 'M':
							case 'N':  case 'O':  case 'P':  case 'Q':
							case 'R':  case 'S':  case 'T':  case 'U':
							case 'V':  case 'W':  case 'X':  case 'Y':
							case 'Z':  case '_':  case 'a':  case 'b':
							case 'c':  case 'd':  case 'e':  case 'f':
							case 'g':  case 'h':  case 'i':  case 'j':
							case 'k':  case 'l':  case 'm':  case 'n':
							case 'o':  case 'p':  case 'q':  case 'r':
							case 's':  case 't':  case 'u':  case 'v':
							case 'w':  case 'x':  case 'y':  case 'z':
							{
								break;
							}
							default:
							{
								throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
							}
							}
							}
							mWORD_CHAR(false);
							}
						}
						catch (RecognitionException pe) {
							synPredMatched163 = false;
						}
						rewind(_m163);
inputState.guessing--;
					}
					if ( synPredMatched163 ) {
						match("<<");
						{
						int _cnt165=0;
						_loop165:
						do {
							if ((_tokenSet_1.member(LA(1))) && ((LA(2) >= '\u0000' && LA(2) <= '\uffff')) && (true) && (true)) {
								mWORD_CHAR(false);
							}
							else {
								if ( _cnt165>=1 ) { break _loop165; } else {throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());}
							}
							
							_cnt165++;
						} while (true);
						}
					}
					else {
						throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
					}
					}}}
					}
					{
					_loop167:
					do {
						if ((_tokenSet_0.member(LA(1)))) {
							_saveIndex=text.length();
							mNOT_NEWLINE(false);
							text.setLength(_saveIndex);
						}
						else {
							break _loop167;
						}
						
					} while (true);
					}
					if ( inputState.guessing==0 ) {
						if (LA(1) != EOF_CHAR) getParent().expectHereDocEnd(new String(text.getBuffer(),_begin,text.length()-_begin));
					}
					{
					switch ( LA(1)) {
					case '\n':  case '\r':
					{
						mNEWLINE(false);
						break;
					}
					case '\uffff':
					{
						_saveIndex=text.length();
						match('\uFFFF');
						text.setLength(_saveIndex);
						break;
					}
					default:
					{
						throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
					}
					}
					}
					if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
						_token = makeToken(_ttype);
						_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
					}
					_returnToken = _token;
				}
				
	protected final void mOPER_LSHIFT(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_LSHIFT;
		int _saveIndex;
		
		match("<<");
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mGLOB(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = GLOB;
		int _saveIndex;
		
		if (!( glob ))
		  throw new SemanticException(" glob ");
		match('<');
		{
		_loop172:
		do {
			if ((_tokenSet_19.member(LA(1)))) {
				{
				match(_tokenSet_19);
				}
			}
			else {
				break _loop172;
			}
			
		} while (true);
		}
		{
		switch ( LA(1)) {
		case '>':
		{
			match('>');
			break;
		}
		case '\uffff':
		{
			_saveIndex=text.length();
			match('\uFFFF');
			text.setLength(_saveIndex);
			break;
		}
		default:
		{
			throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
		}
		}
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPER_RSHIFT(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_RSHIFT;
		int _saveIndex;
		
		match(">>");
		if ( inputState.guessing==0 ) {
			
					_token = createOperatorToken(PerlTokenTypes.OPER_RSHIFT, ">>");
					qmarkRegexp = slashRegexp = false;
				
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPER_GT(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_GT;
		int _saveIndex;
		
		match('>');
		if ( inputState.guessing==0 ) {
			
					_token = createOperatorToken(PerlTokenTypes.OPER_GT, ">");
					qmarkRegexp = slashRegexp = false;
				
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPER_LT(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPER_LT;
		int _saveIndex;
		
		if (!( !glob ))
		  throw new SemanticException(" !glob ");
		match('<');
		if ( inputState.guessing==0 ) {
			
					_token = createOperatorToken(PerlTokenTypes.OPER_LT, "<");
					qmarkRegexp = slashRegexp = false;
				
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOPEN_POD(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPEN_POD;
		int _saveIndex;
		
		if (!( getColumn() == 1 ))
		  throw new SemanticException(" getColumn() == 1 ");
		match('=');
		{
		int _cnt179=0;
		_loop179:
		do {
			if ((_tokenSet_0.member(LA(1)))) {
				mNOT_NEWLINE(false);
			}
			else {
				if ( _cnt179>=1 ) { break _loop179; } else {throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());}
			}
			
			_cnt179++;
		} while (true);
		}
		{
		switch ( LA(1)) {
		case '\n':  case '\r':
		{
			_saveIndex=text.length();
			mNEWLINE(false);
			text.setLength(_saveIndex);
			break;
		}
		case '\uffff':
		{
			_saveIndex=text.length();
			match('\uFFFF');
			text.setLength(_saveIndex);
			break;
		}
		default:
		{
			throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			getParent().expectPODEnd();
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOTHER(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OTHER;
		int _saveIndex;
		
		{
		match(_tokenSet_20);
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	protected final void mKEYWORD1(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = KEYWORD1;
		int _saveIndex;
		
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	protected final void mKEYWORD2(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = KEYWORD2;
		int _saveIndex;
		
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	protected final void mKEYWORD_USE(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = KEYWORD_USE;
		int _saveIndex;
		
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	protected final void mKEYWORD_SUB(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = KEYWORD_SUB;
		int _saveIndex;
		
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	protected final void mKEYWORD_FORMAT(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = KEYWORD_FORMAT;
		int _saveIndex;
		
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	protected final void mOPEN_QUOTE(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = OPEN_QUOTE;
		int _saveIndex;
		
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	
	private static final long[] mk_tokenSet_0() {
		long[] data = new long[2048];
		data[0]=-9217L;
		for (int i = 1; i<=1022; i++) { data[i]=-1L; }
		data[1023]=9223372036854775807L;
		return data;
	}
	public static final BitSet _tokenSet_0 = new BitSet(mk_tokenSet_0());
	private static final long[] mk_tokenSet_1() {
		long[] data = new long[1025];
		data[0]=576179277326712832L;
		data[1]=576460745995190270L;
		return data;
	}
	public static final BitSet _tokenSet_1 = new BitSet(mk_tokenSet_1());
	private static final long[] mk_tokenSet_2() {
		long[] data = new long[2048];
		data[0]=-1152921504606856193L;
		for (int i = 1; i<=1023; i++) { data[i]=-1L; }
		return data;
	}
	public static final BitSet _tokenSet_2 = new BitSet(mk_tokenSet_2());
	private static final long[] mk_tokenSet_3() {
		long[] data = new long[1025];
		data[0]=4294977024L;
		return data;
	}
	public static final BitSet _tokenSet_3 = new BitSet(mk_tokenSet_3());
	private static final long[] mk_tokenSet_4() {
		long[] data = new long[1025];
		data[0]=4604204941312L;
		data[1]=1L;
		return data;
	}
	public static final BitSet _tokenSet_4 = new BitSet(mk_tokenSet_4());
	private static final long[] mk_tokenSet_5() {
		long[] data = new long[1025];
		data[0]=576465635681248768L;
		data[1]=268435457L;
		return data;
	}
	public static final BitSet _tokenSet_5 = new BitSet(mk_tokenSet_5());
	private static final long[] mk_tokenSet_6() {
		long[] data = new long[2048];
		data[0]=576183915891392512L;
		data[1]=1152921498298613759L;
		data[1023]=-9223372036854775808L;
		return data;
	}
	public static final BitSet _tokenSet_6 = new BitSet(mk_tokenSet_6());
	private static final long[] mk_tokenSet_7() {
		long[] data = new long[1025];
		data[0]=-287948909764935680L;
		data[1]=5764607531489951745L;
		return data;
	}
	public static final BitSet _tokenSet_7 = new BitSet(mk_tokenSet_7());
	private static final long[] mk_tokenSet_8() {
		long[] data = new long[2048];
		data[0]=-1L;
		data[1]=-2305843009213693953L;
		for (int i = 2; i<=1022; i++) { data[i]=-1L; }
		data[1023]=9223372036854775807L;
		return data;
	}
	public static final BitSet _tokenSet_8 = new BitSet(mk_tokenSet_8());
	private static final long[] mk_tokenSet_9() {
		long[] data = new long[2048];
		data[0]=-287948905469977601L;
		data[1]=-2882303755074666497L;
		for (int i = 2; i<=1023; i++) { data[i]=-1L; }
		return data;
	}
	public static final BitSet _tokenSet_9 = new BitSet(mk_tokenSet_9());
	private static final long[] mk_tokenSet_10() {
		long[] data = new long[2048];
		data[0]=-288230376151711745L;
		for (int i = 1; i<=1022; i++) { data[i]=-1L; }
		data[1023]=9223372036854775807L;
		return data;
	}
	public static final BitSet _tokenSet_10 = new BitSet(mk_tokenSet_10());
	private static final long[] mk_tokenSet_11() {
		long[] data = new long[1025];
		data[0]=576179848557372928L;
		data[1]=576460750290157566L;
		return data;
	}
	public static final BitSet _tokenSet_11 = new BitSet(mk_tokenSet_11());
	private static final long[] mk_tokenSet_12() {
		long[] data = new long[2048];
		data[0]=-566935683073L;
		data[1]=-4429185023L;
		for (int i = 2; i<=1023; i++) { data[i]=-1L; }
		return data;
	}
	public static final BitSet _tokenSet_12 = new BitSet(mk_tokenSet_12());
	private static final long[] mk_tokenSet_13() {
		long[] data = new long[1025];
		data[0]=21474846208L;
		return data;
	}
	public static final BitSet _tokenSet_13 = new BitSet(mk_tokenSet_13());
	private static final long[] mk_tokenSet_14() {
		long[] data = new long[2048];
		data[0]=-17179878401L;
		for (int i = 1; i<=1022; i++) { data[i]=-1L; }
		data[1023]=9223372036854775807L;
		return data;
	}
	public static final BitSet _tokenSet_14 = new BitSet(mk_tokenSet_14());
	private static final long[] mk_tokenSet_15() {
		long[] data = new long[1025];
		data[0]=554050790912L;
		return data;
	}
	public static final BitSet _tokenSet_15 = new BitSet(mk_tokenSet_15());
	private static final long[] mk_tokenSet_16() {
		long[] data = new long[2048];
		data[0]=-549755823105L;
		for (int i = 1; i<=1022; i++) { data[i]=-1L; }
		data[1023]=9223372036854775807L;
		return data;
	}
	public static final BitSet _tokenSet_16 = new BitSet(mk_tokenSet_16());
	private static final long[] mk_tokenSet_17() {
		long[] data = new long[1025];
		data[0]=4294977024L;
		data[1]=4294967296L;
		return data;
	}
	public static final BitSet _tokenSet_17 = new BitSet(mk_tokenSet_17());
	private static final long[] mk_tokenSet_18() {
		long[] data = new long[2048];
		data[0]=-9217L;
		data[1]=-4294967297L;
		for (int i = 2; i<=1022; i++) { data[i]=-1L; }
		data[1023]=9223372036854775807L;
		return data;
	}
	public static final BitSet _tokenSet_18 = new BitSet(mk_tokenSet_18());
	private static final long[] mk_tokenSet_19() {
		long[] data = new long[2048];
		data[0]=-5764607523034244097L;
		for (int i = 1; i<=1022; i++) { data[i]=-1L; }
		data[1023]=9223372036854775807L;
		return data;
	}
	public static final BitSet _tokenSet_19 = new BitSet(mk_tokenSet_19());
	private static final long[] mk_tokenSet_20() {
		long[] data = new long[2048];
		for (int i = 0; i<=1022; i++) { data[i]=-1L; }
		data[1023]=9223372036854775807L;
		return data;
	}
	public static final BitSet _tokenSet_20 = new BitSet(mk_tokenSet_20());
	
	}

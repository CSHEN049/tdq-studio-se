/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package orgomg.cwmx.resource.dmsii.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import orgomg.cwmx.resource.dmsii.util.DmsiiAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DmsiiItemProviderAdapterFactory extends DmsiiAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public DmsiiItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.dmsii.Database} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DatabaseItemProvider databaseItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.dmsii.Database}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDatabaseAdapter() {
        if (databaseItemProvider == null) {
            databaseItemProvider = new DatabaseItemProvider(this);
        }

        return databaseItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.dmsii.Remap} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RemapItemProvider remapItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.dmsii.Remap}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRemapAdapter() {
        if (remapItemProvider == null) {
            remapItemProvider = new RemapItemProvider(this);
        }

        return remapItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.dmsii.DataSet} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DataSetItemProvider dataSetItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.dmsii.DataSet}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDataSetAdapter() {
        if (dataSetItemProvider == null) {
            dataSetItemProvider = new DataSetItemProvider(this);
        }

        return dataSetItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.dmsii.DataItem} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DataItemItemProvider dataItemItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.dmsii.DataItem}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDataItemAdapter() {
        if (dataItemItemProvider == null) {
            dataItemItemProvider = new DataItemItemProvider(this);
        }

        return dataItemItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.dmsii.VariableFormatPart} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected VariableFormatPartItemProvider variableFormatPartItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.dmsii.VariableFormatPart}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createVariableFormatPartAdapter() {
        if (variableFormatPartItemProvider == null) {
            variableFormatPartItemProvider = new VariableFormatPartItemProvider(this);
        }

        return variableFormatPartItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.dmsii.SetStructure} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SetStructureItemProvider setStructureItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.dmsii.SetStructure}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSetStructureAdapter() {
        if (setStructureItemProvider == null) {
            setStructureItemProvider = new SetStructureItemProvider(this);
        }

        return setStructureItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.dmsii.Set} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SetItemProvider setItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.dmsii.Set}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSetAdapter() {
        if (setItemProvider == null) {
            setItemProvider = new SetItemProvider(this);
        }

        return setItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.dmsii.Access} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected AccessItemProvider accessItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.dmsii.Access}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createAccessAdapter() {
        if (accessItemProvider == null) {
            accessItemProvider = new AccessItemProvider(this);
        }

        return accessItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.dmsii.Subset} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SubsetItemProvider subsetItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.dmsii.Subset}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSubsetAdapter() {
        if (subsetItemProvider == null) {
            subsetItemProvider = new SubsetItemProvider(this);
        }

        return subsetItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.dmsii.AutomaticSubset} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected AutomaticSubsetItemProvider automaticSubsetItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.dmsii.AutomaticSubset}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createAutomaticSubsetAdapter() {
        if (automaticSubsetItemProvider == null) {
            automaticSubsetItemProvider = new AutomaticSubsetItemProvider(this);
        }

        return automaticSubsetItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.dmsii.KeyItem} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected KeyItemItemProvider keyItemItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.dmsii.KeyItem}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createKeyItemAdapter() {
        if (keyItemItemProvider == null) {
            keyItemItemProvider = new KeyItemItemProvider(this);
        }

        return keyItemItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.dmsii.RemapItem} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RemapItemItemProvider remapItemItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.dmsii.RemapItem}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRemapItemAdapter() {
        if (remapItemItemProvider == null) {
            remapItemItemProvider = new RemapItemItemProvider(this);
        }

        return remapItemItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.dmsii.FieldBit} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected FieldBitItemProvider fieldBitItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.dmsii.FieldBit}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createFieldBitAdapter() {
        if (fieldBitItemProvider == null) {
            fieldBitItemProvider = new FieldBitItemProvider(this);
        }

        return fieldBitItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.dmsii.Remark} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RemarkItemProvider remarkItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.dmsii.Remark}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRemarkAdapter() {
        if (remarkItemProvider == null) {
            remarkItemProvider = new RemarkItemProvider(this);
        }

        return remarkItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.dmsii.PhysicalDatabase} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PhysicalDatabaseItemProvider physicalDatabaseItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.dmsii.PhysicalDatabase}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPhysicalDatabaseAdapter() {
        if (physicalDatabaseItemProvider == null) {
            physicalDatabaseItemProvider = new PhysicalDatabaseItemProvider(this);
        }

        return physicalDatabaseItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.dmsii.PhysicalDataSet} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PhysicalDataSetItemProvider physicalDataSetItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.dmsii.PhysicalDataSet}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPhysicalDataSetAdapter() {
        if (physicalDataSetItemProvider == null) {
            physicalDataSetItemProvider = new PhysicalDataSetItemProvider(this);
        }

        return physicalDataSetItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.dmsii.DASDLComment} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DASDLCommentItemProvider dasdlCommentItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.dmsii.DASDLComment}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDASDLCommentAdapter() {
        if (dasdlCommentItemProvider == null) {
            dasdlCommentItemProvider = new DASDLCommentItemProvider(this);
        }

        return dasdlCommentItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.dmsii.PhysicalSet} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PhysicalSetItemProvider physicalSetItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.dmsii.PhysicalSet}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPhysicalSetAdapter() {
        if (physicalSetItemProvider == null) {
            physicalSetItemProvider = new PhysicalSetItemProvider(this);
        }

        return physicalSetItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.dmsii.PhysicalDataSetOverride} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PhysicalDataSetOverrideItemProvider physicalDataSetOverrideItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.dmsii.PhysicalDataSetOverride}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPhysicalDataSetOverrideAdapter() {
        if (physicalDataSetOverrideItemProvider == null) {
            physicalDataSetOverrideItemProvider = new PhysicalDataSetOverrideItemProvider(this);
        }

        return physicalDataSetOverrideItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.dmsii.PhysicalSetOverride} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PhysicalSetOverrideItemProvider physicalSetOverrideItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.dmsii.PhysicalSetOverride}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPhysicalSetOverrideAdapter() {
        if (physicalSetOverrideItemProvider == null) {
            physicalSetOverrideItemProvider = new PhysicalSetOverrideItemProvider(this);
        }

        return physicalSetOverrideItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.dmsii.PhysicalAccessOverride} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PhysicalAccessOverrideItemProvider physicalAccessOverrideItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.dmsii.PhysicalAccessOverride}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPhysicalAccessOverrideAdapter() {
        if (physicalAccessOverrideItemProvider == null) {
            physicalAccessOverrideItemProvider = new PhysicalAccessOverrideItemProvider(this);
        }

        return physicalAccessOverrideItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.dmsii.DASDLProperty} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DASDLPropertyItemProvider dasdlPropertyItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.dmsii.DASDLProperty}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDASDLPropertyAdapter() {
        if (dasdlPropertyItemProvider == null) {
            dasdlPropertyItemProvider = new DASDLPropertyItemProvider(this);
        }

        return dasdlPropertyItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class) || (((Class<?>)type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void dispose() {
        if (databaseItemProvider != null) databaseItemProvider.dispose();
        if (remapItemProvider != null) remapItemProvider.dispose();
        if (dataSetItemProvider != null) dataSetItemProvider.dispose();
        if (dataItemItemProvider != null) dataItemItemProvider.dispose();
        if (variableFormatPartItemProvider != null) variableFormatPartItemProvider.dispose();
        if (setStructureItemProvider != null) setStructureItemProvider.dispose();
        if (setItemProvider != null) setItemProvider.dispose();
        if (accessItemProvider != null) accessItemProvider.dispose();
        if (subsetItemProvider != null) subsetItemProvider.dispose();
        if (automaticSubsetItemProvider != null) automaticSubsetItemProvider.dispose();
        if (keyItemItemProvider != null) keyItemItemProvider.dispose();
        if (remapItemItemProvider != null) remapItemItemProvider.dispose();
        if (fieldBitItemProvider != null) fieldBitItemProvider.dispose();
        if (remarkItemProvider != null) remarkItemProvider.dispose();
        if (physicalDatabaseItemProvider != null) physicalDatabaseItemProvider.dispose();
        if (physicalDataSetItemProvider != null) physicalDataSetItemProvider.dispose();
        if (dasdlCommentItemProvider != null) dasdlCommentItemProvider.dispose();
        if (physicalSetItemProvider != null) physicalSetItemProvider.dispose();
        if (physicalDataSetOverrideItemProvider != null) physicalDataSetOverrideItemProvider.dispose();
        if (physicalSetOverrideItemProvider != null) physicalSetOverrideItemProvider.dispose();
        if (physicalAccessOverrideItemProvider != null) physicalAccessOverrideItemProvider.dispose();
        if (dasdlPropertyItemProvider != null) dasdlPropertyItemProvider.dispose();
    }

}

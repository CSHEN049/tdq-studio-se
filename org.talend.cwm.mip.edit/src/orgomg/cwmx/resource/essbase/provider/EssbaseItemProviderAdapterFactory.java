/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package orgomg.cwmx.resource.essbase.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import orgomg.cwmx.resource.essbase.util.EssbaseAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class EssbaseItemProviderAdapterFactory extends EssbaseAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EssbaseItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.essbase.Alias} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected AliasItemProvider aliasItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.essbase.Alias}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createAliasAdapter() {
        if (aliasItemProvider == null) {
            aliasItemProvider = new AliasItemProvider(this);
        }

        return aliasItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.essbase.Application} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ApplicationItemProvider applicationItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.essbase.Application}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createApplicationAdapter() {
        if (applicationItemProvider == null) {
            applicationItemProvider = new ApplicationItemProvider(this);
        }

        return applicationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.essbase.Comment} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CommentItemProvider commentItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.essbase.Comment}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCommentAdapter() {
        if (commentItemProvider == null) {
            commentItemProvider = new CommentItemProvider(this);
        }

        return commentItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.essbase.Consolidation} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ConsolidationItemProvider consolidationItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.essbase.Consolidation}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createConsolidationAdapter() {
        if (consolidationItemProvider == null) {
            consolidationItemProvider = new ConsolidationItemProvider(this);
        }

        return consolidationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.essbase.CurrencyConversion} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CurrencyConversionItemProvider currencyConversionItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.essbase.CurrencyConversion}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCurrencyConversionAdapter() {
        if (currencyConversionItemProvider == null) {
            currencyConversionItemProvider = new CurrencyConversionItemProvider(this);
        }

        return currencyConversionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.essbase.DataStorage} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DataStorageItemProvider dataStorageItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.essbase.DataStorage}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDataStorageAdapter() {
        if (dataStorageItemProvider == null) {
            dataStorageItemProvider = new DataStorageItemProvider(this);
        }

        return dataStorageItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.essbase.Database} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DatabaseItemProvider databaseItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.essbase.Database}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDatabaseAdapter() {
        if (databaseItemProvider == null) {
            databaseItemProvider = new DatabaseItemProvider(this);
        }

        return databaseItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.essbase.Dimension} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DimensionItemProvider dimensionItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.essbase.Dimension}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDimensionAdapter() {
        if (dimensionItemProvider == null) {
            dimensionItemProvider = new DimensionItemProvider(this);
        }

        return dimensionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.essbase.Formula} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected FormulaItemProvider formulaItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.essbase.Formula}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createFormulaAdapter() {
        if (formulaItemProvider == null) {
            formulaItemProvider = new FormulaItemProvider(this);
        }

        return formulaItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.essbase.Generation} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected GenerationItemProvider generationItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.essbase.Generation}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createGenerationAdapter() {
        if (generationItemProvider == null) {
            generationItemProvider = new GenerationItemProvider(this);
        }

        return generationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.essbase.ImmediateParent} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ImmediateParentItemProvider immediateParentItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.essbase.ImmediateParent}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createImmediateParentAdapter() {
        if (immediateParentItemProvider == null) {
            immediateParentItemProvider = new ImmediateParentItemProvider(this);
        }

        return immediateParentItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.essbase.Level} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected LevelItemProvider levelItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.essbase.Level}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createLevelAdapter() {
        if (levelItemProvider == null) {
            levelItemProvider = new LevelItemProvider(this);
        }

        return levelItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.essbase.MemberName} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected MemberNameItemProvider memberNameItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.essbase.MemberName}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createMemberNameAdapter() {
        if (memberNameItemProvider == null) {
            memberNameItemProvider = new MemberNameItemProvider(this);
        }

        return memberNameItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.essbase.OLAPServer} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OLAPServerItemProvider olapServerItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.essbase.OLAPServer}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOLAPServerAdapter() {
        if (olapServerItemProvider == null) {
            olapServerItemProvider = new OLAPServerItemProvider(this);
        }

        return olapServerItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.essbase.Outline} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OutlineItemProvider outlineItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.essbase.Outline}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOutlineAdapter() {
        if (outlineItemProvider == null) {
            outlineItemProvider = new OutlineItemProvider(this);
        }

        return outlineItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.essbase.ReplicatedPartition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ReplicatedPartitionItemProvider replicatedPartitionItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.essbase.ReplicatedPartition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createReplicatedPartitionAdapter() {
        if (replicatedPartitionItemProvider == null) {
            replicatedPartitionItemProvider = new ReplicatedPartitionItemProvider(this);
        }

        return replicatedPartitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.essbase.TimeBalance} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected TimeBalanceItemProvider timeBalanceItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.essbase.TimeBalance}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createTimeBalanceAdapter() {
        if (timeBalanceItemProvider == null) {
            timeBalanceItemProvider = new TimeBalanceItemProvider(this);
        }

        return timeBalanceItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.essbase.TransparentPartition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected TransparentPartitionItemProvider transparentPartitionItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.essbase.TransparentPartition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createTransparentPartitionAdapter() {
        if (transparentPartitionItemProvider == null) {
            transparentPartitionItemProvider = new TransparentPartitionItemProvider(this);
        }

        return transparentPartitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.essbase.TwoPassCalculation} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected TwoPassCalculationItemProvider twoPassCalculationItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.essbase.TwoPassCalculation}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createTwoPassCalculationAdapter() {
        if (twoPassCalculationItemProvider == null) {
            twoPassCalculationItemProvider = new TwoPassCalculationItemProvider(this);
        }

        return twoPassCalculationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.essbase.UDA} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected UDAItemProvider udaItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.essbase.UDA}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createUDAAdapter() {
        if (udaItemProvider == null) {
            udaItemProvider = new UDAItemProvider(this);
        }

        return udaItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.essbase.VarianceReporting} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected VarianceReportingItemProvider varianceReportingItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.essbase.VarianceReporting}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createVarianceReportingAdapter() {
        if (varianceReportingItemProvider == null) {
            varianceReportingItemProvider = new VarianceReportingItemProvider(this);
        }

        return varianceReportingItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.resource.essbase.LinkedPartition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected LinkedPartitionItemProvider linkedPartitionItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.resource.essbase.LinkedPartition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createLinkedPartitionAdapter() {
        if (linkedPartitionItemProvider == null) {
            linkedPartitionItemProvider = new LinkedPartitionItemProvider(this);
        }

        return linkedPartitionItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class) || (((Class<?>)type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void dispose() {
        if (aliasItemProvider != null) aliasItemProvider.dispose();
        if (applicationItemProvider != null) applicationItemProvider.dispose();
        if (commentItemProvider != null) commentItemProvider.dispose();
        if (consolidationItemProvider != null) consolidationItemProvider.dispose();
        if (currencyConversionItemProvider != null) currencyConversionItemProvider.dispose();
        if (dataStorageItemProvider != null) dataStorageItemProvider.dispose();
        if (databaseItemProvider != null) databaseItemProvider.dispose();
        if (dimensionItemProvider != null) dimensionItemProvider.dispose();
        if (formulaItemProvider != null) formulaItemProvider.dispose();
        if (generationItemProvider != null) generationItemProvider.dispose();
        if (immediateParentItemProvider != null) immediateParentItemProvider.dispose();
        if (levelItemProvider != null) levelItemProvider.dispose();
        if (memberNameItemProvider != null) memberNameItemProvider.dispose();
        if (olapServerItemProvider != null) olapServerItemProvider.dispose();
        if (outlineItemProvider != null) outlineItemProvider.dispose();
        if (replicatedPartitionItemProvider != null) replicatedPartitionItemProvider.dispose();
        if (timeBalanceItemProvider != null) timeBalanceItemProvider.dispose();
        if (transparentPartitionItemProvider != null) transparentPartitionItemProvider.dispose();
        if (twoPassCalculationItemProvider != null) twoPassCalculationItemProvider.dispose();
        if (udaItemProvider != null) udaItemProvider.dispose();
        if (varianceReportingItemProvider != null) varianceReportingItemProvider.dispose();
        if (linkedPartitionItemProvider != null) linkedPartitionItemProvider.dispose();
    }

}

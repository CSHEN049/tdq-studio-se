/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package orgomg.cwmx.analysis.informationreporting.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import orgomg.cwmx.analysis.informationreporting.util.InformationreportingAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class InformationreportingItemProviderAdapterFactory extends InformationreportingAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public InformationreportingItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.analysis.informationreporting.Report} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ReportItemProvider reportItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.analysis.informationreporting.Report}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createReportAdapter() {
        if (reportItemProvider == null) {
            reportItemProvider = new ReportItemProvider(this);
        }

        return reportItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.analysis.informationreporting.ReportAttribute} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ReportAttributeItemProvider reportAttributeItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.analysis.informationreporting.ReportAttribute}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createReportAttributeAdapter() {
        if (reportAttributeItemProvider == null) {
            reportAttributeItemProvider = new ReportAttributeItemProvider(this);
        }

        return reportAttributeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.analysis.informationreporting.ReportExecution} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ReportExecutionItemProvider reportExecutionItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.analysis.informationreporting.ReportExecution}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createReportExecutionAdapter() {
        if (reportExecutionItemProvider == null) {
            reportExecutionItemProvider = new ReportExecutionItemProvider(this);
        }

        return reportExecutionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.analysis.informationreporting.ReportField} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ReportFieldItemProvider reportFieldItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.analysis.informationreporting.ReportField}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createReportFieldAdapter() {
        if (reportFieldItemProvider == null) {
            reportFieldItemProvider = new ReportFieldItemProvider(this);
        }

        return reportFieldItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.analysis.informationreporting.ReportGroup} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ReportGroupItemProvider reportGroupItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.analysis.informationreporting.ReportGroup}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createReportGroupAdapter() {
        if (reportGroupItemProvider == null) {
            reportGroupItemProvider = new ReportGroupItemProvider(this);
        }

        return reportGroupItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmx.analysis.informationreporting.ReportPackage} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ReportPackageItemProvider reportPackageItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmx.analysis.informationreporting.ReportPackage}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createReportPackageAdapter() {
        if (reportPackageItemProvider == null) {
            reportPackageItemProvider = new ReportPackageItemProvider(this);
        }

        return reportPackageItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class) || (((Class<?>)type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void dispose() {
        if (reportItemProvider != null) reportItemProvider.dispose();
        if (reportAttributeItemProvider != null) reportAttributeItemProvider.dispose();
        if (reportExecutionItemProvider != null) reportExecutionItemProvider.dispose();
        if (reportFieldItemProvider != null) reportFieldItemProvider.dispose();
        if (reportGroupItemProvider != null) reportGroupItemProvider.dispose();
        if (reportPackageItemProvider != null) reportPackageItemProvider.dispose();
    }

}

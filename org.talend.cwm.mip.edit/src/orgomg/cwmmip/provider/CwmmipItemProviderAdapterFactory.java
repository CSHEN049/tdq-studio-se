/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package orgomg.cwmmip.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import orgomg.cwmmip.util.CwmmipAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CwmmipItemProviderAdapterFactory extends CwmmipAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public CwmmipItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmmip.UnitOfInterchange} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected UnitOfInterchangeItemProvider unitOfInterchangeItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmmip.UnitOfInterchange}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createUnitOfInterchangeAdapter() {
        if (unitOfInterchangeItemProvider == null) {
            unitOfInterchangeItemProvider = new UnitOfInterchangeItemProvider(this);
        }

        return unitOfInterchangeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmmip.InterchangePattern} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected InterchangePatternItemProvider interchangePatternItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmmip.InterchangePattern}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createInterchangePatternAdapter() {
        if (interchangePatternItemProvider == null) {
            interchangePatternItemProvider = new InterchangePatternItemProvider(this);
        }

        return interchangePatternItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmmip.ModeledSemanticContext} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ModeledSemanticContextItemProvider modeledSemanticContextItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmmip.ModeledSemanticContext}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createModeledSemanticContextAdapter() {
        if (modeledSemanticContextItemProvider == null) {
            modeledSemanticContextItemProvider = new ModeledSemanticContextItemProvider(this);
        }

        return modeledSemanticContextItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmmip.SemanticContext} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SemanticContextItemProvider semanticContextItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmmip.SemanticContext}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSemanticContextAdapter() {
        if (semanticContextItemProvider == null) {
            semanticContextItemProvider = new SemanticContextItemProvider(this);
        }

        return semanticContextItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmmip.Element} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ElementItemProvider elementItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmmip.Element}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createElementAdapter() {
        if (elementItemProvider == null) {
            elementItemProvider = new ElementItemProvider(this);
        }

        return elementItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmmip.GraphSubset} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected GraphSubsetItemProvider graphSubsetItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmmip.GraphSubset}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createGraphSubsetAdapter() {
        if (graphSubsetItemProvider == null) {
            graphSubsetItemProvider = new GraphSubsetItemProvider(this);
        }

        return graphSubsetItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmmip.PatternConstraint} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PatternConstraintItemProvider patternConstraintItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmmip.PatternConstraint}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPatternConstraintAdapter() {
        if (patternConstraintItemProvider == null) {
            patternConstraintItemProvider = new PatternConstraintItemProvider(this);
        }

        return patternConstraintItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmmip.ModeledGraphSubset} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ModeledGraphSubsetItemProvider modeledGraphSubsetItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmmip.ModeledGraphSubset}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createModeledGraphSubsetAdapter() {
        if (modeledGraphSubsetItemProvider == null) {
            modeledGraphSubsetItemProvider = new ModeledGraphSubsetItemProvider(this);
        }

        return modeledGraphSubsetItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmmip.Restriction} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RestrictionItemProvider restrictionItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmmip.Restriction}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRestrictionAdapter() {
        if (restrictionItemProvider == null) {
            restrictionItemProvider = new RestrictionItemProvider(this);
        }

        return restrictionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwmmip.BindingParameter} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected BindingParameterItemProvider bindingParameterItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwmmip.BindingParameter}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createBindingParameterAdapter() {
        if (bindingParameterItemProvider == null) {
            bindingParameterItemProvider = new BindingParameterItemProvider(this);
        }

        return bindingParameterItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class) || (((Class<?>)type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void dispose() {
        if (unitOfInterchangeItemProvider != null) unitOfInterchangeItemProvider.dispose();
        if (interchangePatternItemProvider != null) interchangePatternItemProvider.dispose();
        if (modeledSemanticContextItemProvider != null) modeledSemanticContextItemProvider.dispose();
        if (semanticContextItemProvider != null) semanticContextItemProvider.dispose();
        if (elementItemProvider != null) elementItemProvider.dispose();
        if (graphSubsetItemProvider != null) graphSubsetItemProvider.dispose();
        if (patternConstraintItemProvider != null) patternConstraintItemProvider.dispose();
        if (modeledGraphSubsetItemProvider != null) modeledGraphSubsetItemProvider.dispose();
        if (restrictionItemProvider != null) restrictionItemProvider.dispose();
        if (bindingParameterItemProvider != null) bindingParameterItemProvider.dispose();
    }

}

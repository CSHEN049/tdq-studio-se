/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package orgomg.cwm.resource.xml.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import orgomg.cwm.resource.xml.util.XmlAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class XmlItemProviderAdapterFactory extends XmlAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public XmlItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwm.resource.xml.Schema} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SchemaItemProvider schemaItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwm.resource.xml.Schema}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSchemaAdapter() {
        if (schemaItemProvider == null) {
            schemaItemProvider = new SchemaItemProvider(this);
        }

        return schemaItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwm.resource.xml.ElementType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ElementTypeItemProvider elementTypeItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwm.resource.xml.ElementType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createElementTypeAdapter() {
        if (elementTypeItemProvider == null) {
            elementTypeItemProvider = new ElementTypeItemProvider(this);
        }

        return elementTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwm.resource.xml.Attribute} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected AttributeItemProvider attributeItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwm.resource.xml.Attribute}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createAttributeAdapter() {
        if (attributeItemProvider == null) {
            attributeItemProvider = new AttributeItemProvider(this);
        }

        return attributeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwm.resource.xml.Content} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ContentItemProvider contentItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwm.resource.xml.Content}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createContentAdapter() {
        if (contentItemProvider == null) {
            contentItemProvider = new ContentItemProvider(this);
        }

        return contentItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwm.resource.xml.ElementContent} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ElementContentItemProvider elementContentItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwm.resource.xml.ElementContent}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createElementContentAdapter() {
        if (elementContentItemProvider == null) {
            elementContentItemProvider = new ElementContentItemProvider(this);
        }

        return elementContentItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwm.resource.xml.MixedContent} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected MixedContentItemProvider mixedContentItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwm.resource.xml.MixedContent}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createMixedContentAdapter() {
        if (mixedContentItemProvider == null) {
            mixedContentItemProvider = new MixedContentItemProvider(this);
        }

        return mixedContentItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwm.resource.xml.ElementTypeReference} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ElementTypeReferenceItemProvider elementTypeReferenceItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwm.resource.xml.ElementTypeReference}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createElementTypeReferenceAdapter() {
        if (elementTypeReferenceItemProvider == null) {
            elementTypeReferenceItemProvider = new ElementTypeReferenceItemProvider(this);
        }

        return elementTypeReferenceItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwm.resource.xml.Text} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected TextItemProvider textItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwm.resource.xml.Text}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createTextAdapter() {
        if (textItemProvider == null) {
            textItemProvider = new TextItemProvider(this);
        }

        return textItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwm.resource.xml.Element} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ElementItemProvider elementItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwm.resource.xml.Element}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createElementAdapter() {
        if (elementItemProvider == null) {
            elementItemProvider = new ElementItemProvider(this);
        }

        return elementItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link orgomg.cwm.resource.xml.Document} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DocumentItemProvider documentItemProvider;

    /**
     * This creates an adapter for a {@link orgomg.cwm.resource.xml.Document}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDocumentAdapter() {
        if (documentItemProvider == null) {
            documentItemProvider = new DocumentItemProvider(this);
        }

        return documentItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class) || (((Class<?>)type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void dispose() {
        if (schemaItemProvider != null) schemaItemProvider.dispose();
        if (elementTypeItemProvider != null) elementTypeItemProvider.dispose();
        if (attributeItemProvider != null) attributeItemProvider.dispose();
        if (contentItemProvider != null) contentItemProvider.dispose();
        if (elementContentItemProvider != null) elementContentItemProvider.dispose();
        if (mixedContentItemProvider != null) mixedContentItemProvider.dispose();
        if (elementTypeReferenceItemProvider != null) elementTypeReferenceItemProvider.dispose();
        if (textItemProvider != null) textItemProvider.dispose();
        if (elementItemProvider != null) elementItemProvider.dispose();
        if (documentItemProvider != null) documentItemProvider.dispose();
    }

}
